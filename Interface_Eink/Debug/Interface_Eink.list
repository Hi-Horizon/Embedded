
Interface_Eink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e28  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004000  08004000  00014000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004040  08004040  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004040  08004040  00014040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004048  08004048  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004048  08004048  00014048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800404c  0800404c  0001404c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004050  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00017c44  2000000c  0800405c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20017c50  0800405c  00027c50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000105e8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020ce  00000000  00000000  00030624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  000326f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b28  00000000  00000000  000332e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000250ca  00000000  00000000  00033e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb2a  00000000  00000000  00058eda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eae1b  00000000  00000000  00067a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015281f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000308c  00000000  00000000  00152870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003fe8 	.word	0x08003fe8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003fe8 	.word	0x08003fe8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fdf4 	bl	800110c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f850 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f922 	bl	8000770 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800052c:	f000 f898 	bl	8000660 <MX_LPUART1_UART_Init>
  MX_SPI2_Init();
 8000530:	f000 f8e0 	bl	80006f4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  resetDriver();
 8000534:	f000 fc82 	bl	8000e3c <resetDriver>
	getIT8951Info(&hspi2, &screenInfo);
 8000538:	491f      	ldr	r1, [pc, #124]	; (80005b8 <main+0x9c>)
 800053a:	4820      	ldr	r0, [pc, #128]	; (80005bc <main+0xa0>)
 800053c:	f000 fad1 	bl	8000ae2 <getIT8951Info>

	writeScreenRegister(&hspi2, 0x0000+0x04, 0x0001);
 8000540:	2201      	movs	r2, #1
 8000542:	2104      	movs	r1, #4
 8000544:	481d      	ldr	r0, [pc, #116]	; (80005bc <main+0xa0>)
 8000546:	f000 fb46 	bl	8000bd6 <writeScreenRegister>

	renderSettings.endianType = 0; //little
 800054a:	4b1d      	ldr	r3, [pc, #116]	; (80005c0 <main+0xa4>)
 800054c:	2200      	movs	r2, #0
 800054e:	801a      	strh	r2, [r3, #0]
	renderSettings.pixelFormat = 3;
 8000550:	4b1b      	ldr	r3, [pc, #108]	; (80005c0 <main+0xa4>)
 8000552:	2203      	movs	r2, #3
 8000554:	805a      	strh	r2, [r3, #2]
	renderSettings.rotation = 0;
 8000556:	4b1a      	ldr	r3, [pc, #104]	; (80005c0 <main+0xa4>)
 8000558:	2200      	movs	r2, #0
 800055a:	809a      	strh	r2, [r3, #4]

	renderSettings.xBegin = 0;
 800055c:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <main+0xa4>)
 800055e:	2200      	movs	r2, #0
 8000560:	80da      	strh	r2, [r3, #6]
	renderSettings.yBegin = 0;
 8000562:	4b17      	ldr	r3, [pc, #92]	; (80005c0 <main+0xa4>)
 8000564:	2200      	movs	r2, #0
 8000566:	815a      	strh	r2, [r3, #10]
	renderSettings.xWidth = screenInfo.screenWidth;
 8000568:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <main+0x9c>)
 800056a:	881a      	ldrh	r2, [r3, #0]
 800056c:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <main+0xa4>)
 800056e:	811a      	strh	r2, [r3, #8]
	renderSettings.yHeight = screenInfo.screenWidth;
 8000570:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <main+0x9c>)
 8000572:	881a      	ldrh	r2, [r3, #0]
 8000574:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <main+0xa4>)
 8000576:	819a      	strh	r2, [r3, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	memset(FrameBuf, 0x00, (screenInfo.screenWidth * screenInfo.screenHeight)/32);
 8000578:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <main+0x9c>)
 800057a:	881b      	ldrh	r3, [r3, #0]
 800057c:	461a      	mov	r2, r3
 800057e:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <main+0x9c>)
 8000580:	885b      	ldrh	r3, [r3, #2]
 8000582:	fb02 f303 	mul.w	r3, r2, r3
 8000586:	2b00      	cmp	r3, #0
 8000588:	da00      	bge.n	800058c <main+0x70>
 800058a:	331f      	adds	r3, #31
 800058c:	115b      	asrs	r3, r3, #5
 800058e:	461a      	mov	r2, r3
 8000590:	2100      	movs	r1, #0
 8000592:	480c      	ldr	r0, [pc, #48]	; (80005c4 <main+0xa8>)
 8000594:	f003 fd20 	bl	8003fd8 <memset>
	//	IT8951WaitForDisplayReady();
	IT8951HostAreaPackedPixelWrite(&hspi2, &screenInfo, &renderSettings, FrameBuf);
 8000598:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <main+0xa8>)
 800059a:	4a09      	ldr	r2, [pc, #36]	; (80005c0 <main+0xa4>)
 800059c:	4906      	ldr	r1, [pc, #24]	; (80005b8 <main+0x9c>)
 800059e:	4807      	ldr	r0, [pc, #28]	; (80005bc <main+0xa0>)
 80005a0:	f000 fbb0 	bl	8000d04 <IT8951HostAreaPackedPixelWrite>
	IT8951DisplayArea(&hspi2, &renderSettings, 2);
 80005a4:	2202      	movs	r2, #2
 80005a6:	4906      	ldr	r1, [pc, #24]	; (80005c0 <main+0xa4>)
 80005a8:	4804      	ldr	r0, [pc, #16]	; (80005bc <main+0xa0>)
 80005aa:	f000 fbe6 	bl	8000d7a <IT8951DisplayArea>
	HAL_Delay(100);
 80005ae:	2064      	movs	r0, #100	; 0x64
 80005b0:	f000 fe1c 	bl	80011ec <HAL_Delay>
	memset(FrameBuf, 0x00, (screenInfo.screenWidth * screenInfo.screenHeight)/32);
 80005b4:	e7e0      	b.n	8000578 <main+0x5c>
 80005b6:	bf00      	nop
 80005b8:	2000011c 	.word	0x2000011c
 80005bc:	200000b8 	.word	0x200000b8
 80005c0:	20000144 	.word	0x20000144
 80005c4:	20000154 	.word	0x20000154

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	; 0x50
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0318 	add.w	r3, r7, #24
 80005d2:	2238      	movs	r2, #56	; 0x38
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f003 fcfe 	bl	8003fd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005ee:	f001 f905 	bl	80017fc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f2:	2302      	movs	r3, #2
 80005f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005fa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005fc:	2340      	movs	r3, #64	; 0x40
 80005fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000600:	2302      	movs	r3, #2
 8000602:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000604:	2302      	movs	r3, #2
 8000606:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000608:	2301      	movs	r3, #1
 800060a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 800060c:	230c      	movs	r3, #12
 800060e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000610:	2302      	movs	r3, #2
 8000612:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000614:	2302      	movs	r3, #2
 8000616:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000618:	2302      	movs	r3, #2
 800061a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061c:	f107 0318 	add.w	r3, r7, #24
 8000620:	4618      	mov	r0, r3
 8000622:	f001 f99f 	bl	8001964 <HAL_RCC_OscConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800062c:	f000 f926 	bl	800087c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000630:	230f      	movs	r3, #15
 8000632:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000634:	2303      	movs	r3, #3
 8000636:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2103      	movs	r1, #3
 8000648:	4618      	mov	r0, r3
 800064a:	f001 fca3 	bl	8001f94 <HAL_RCC_ClockConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000654:	f000 f912 	bl	800087c <Error_Handler>
  }
}
 8000658:	bf00      	nop
 800065a:	3750      	adds	r7, #80	; 0x50
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000664:	4b21      	ldr	r3, [pc, #132]	; (80006ec <MX_LPUART1_UART_Init+0x8c>)
 8000666:	4a22      	ldr	r2, [pc, #136]	; (80006f0 <MX_LPUART1_UART_Init+0x90>)
 8000668:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800066a:	4b20      	ldr	r3, [pc, #128]	; (80006ec <MX_LPUART1_UART_Init+0x8c>)
 800066c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000670:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000672:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <MX_LPUART1_UART_Init+0x8c>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000678:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <MX_LPUART1_UART_Init+0x8c>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800067e:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <MX_LPUART1_UART_Init+0x8c>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000684:	4b19      	ldr	r3, [pc, #100]	; (80006ec <MX_LPUART1_UART_Init+0x8c>)
 8000686:	220c      	movs	r2, #12
 8000688:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068a:	4b18      	ldr	r3, [pc, #96]	; (80006ec <MX_LPUART1_UART_Init+0x8c>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000690:	4b16      	ldr	r3, [pc, #88]	; (80006ec <MX_LPUART1_UART_Init+0x8c>)
 8000692:	2200      	movs	r2, #0
 8000694:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <MX_LPUART1_UART_Init+0x8c>)
 8000698:	2200      	movs	r2, #0
 800069a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800069c:	4b13      	ldr	r3, [pc, #76]	; (80006ec <MX_LPUART1_UART_Init+0x8c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006a2:	4812      	ldr	r0, [pc, #72]	; (80006ec <MX_LPUART1_UART_Init+0x8c>)
 80006a4:	f002 fe70 	bl	8003388 <HAL_UART_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80006ae:	f000 f8e5 	bl	800087c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006b2:	2100      	movs	r1, #0
 80006b4:	480d      	ldr	r0, [pc, #52]	; (80006ec <MX_LPUART1_UART_Init+0x8c>)
 80006b6:	f003 fba1 	bl	8003dfc <HAL_UARTEx_SetTxFifoThreshold>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80006c0:	f000 f8dc 	bl	800087c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006c4:	2100      	movs	r1, #0
 80006c6:	4809      	ldr	r0, [pc, #36]	; (80006ec <MX_LPUART1_UART_Init+0x8c>)
 80006c8:	f003 fbd6 	bl	8003e78 <HAL_UARTEx_SetRxFifoThreshold>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80006d2:	f000 f8d3 	bl	800087c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_LPUART1_UART_Init+0x8c>)
 80006d8:	f003 fb57 	bl	8003d8a <HAL_UARTEx_DisableFifoMode>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80006e2:	f000 f8cb 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000028 	.word	0x20000028
 80006f0:	40008000 	.word	0x40008000

080006f4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006f8:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <MX_SPI2_Init+0x74>)
 80006fa:	4a1c      	ldr	r2, [pc, #112]	; (800076c <MX_SPI2_Init+0x78>)
 80006fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006fe:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <MX_SPI2_Init+0x74>)
 8000700:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000704:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000706:	4b18      	ldr	r3, [pc, #96]	; (8000768 <MX_SPI2_Init+0x74>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800070c:	4b16      	ldr	r3, [pc, #88]	; (8000768 <MX_SPI2_Init+0x74>)
 800070e:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000712:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_SPI2_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_SPI2_Init+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_SPI2_Init+0x74>)
 8000722:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000726:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_SPI2_Init+0x74>)
 800072a:	2210      	movs	r2, #16
 800072c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_SPI2_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_SPI2_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_SPI2_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_SPI2_Init+0x74>)
 8000742:	2207      	movs	r2, #7
 8000744:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_SPI2_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_SPI2_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_SPI2_Init+0x74>)
 8000754:	f002 f888 	bl	8002868 <HAL_SPI_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800075e:	f000 f88d 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200000b8 	.word	0x200000b8
 800076c:	40003800 	.word	0x40003800

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	4b3a      	ldr	r3, [pc, #232]	; (8000870 <MX_GPIO_Init+0x100>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	4a39      	ldr	r2, [pc, #228]	; (8000870 <MX_GPIO_Init+0x100>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000792:	4b37      	ldr	r3, [pc, #220]	; (8000870 <MX_GPIO_Init+0x100>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800079e:	4b34      	ldr	r3, [pc, #208]	; (8000870 <MX_GPIO_Init+0x100>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	4a33      	ldr	r2, [pc, #204]	; (8000870 <MX_GPIO_Init+0x100>)
 80007a4:	f043 0320 	orr.w	r3, r3, #32
 80007a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007aa:	4b31      	ldr	r3, [pc, #196]	; (8000870 <MX_GPIO_Init+0x100>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	f003 0320 	and.w	r3, r3, #32
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b2e      	ldr	r3, [pc, #184]	; (8000870 <MX_GPIO_Init+0x100>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	4a2d      	ldr	r2, [pc, #180]	; (8000870 <MX_GPIO_Init+0x100>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c2:	4b2b      	ldr	r3, [pc, #172]	; (8000870 <MX_GPIO_Init+0x100>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	4b28      	ldr	r3, [pc, #160]	; (8000870 <MX_GPIO_Init+0x100>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	4a27      	ldr	r2, [pc, #156]	; (8000870 <MX_GPIO_Init+0x100>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007da:	4b25      	ldr	r3, [pc, #148]	; (8000870 <MX_GPIO_Init+0x100>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2120      	movs	r1, #32
 80007ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ee:	f000 ffc9 	bl	8001784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007f8:	481e      	ldr	r0, [pc, #120]	; (8000874 <MX_GPIO_Init+0x104>)
 80007fa:	f000 ffc3 	bl	8001784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000804:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	4818      	ldr	r0, [pc, #96]	; (8000878 <MX_GPIO_Init+0x108>)
 8000816:	f000 fe1b 	bl	8001450 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800081a:	2320      	movs	r3, #32
 800081c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4619      	mov	r1, r3
 8000830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000834:	f000 fe0c 	bl	8001450 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000842:	2301      	movs	r3, #1
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000846:	2301      	movs	r3, #1
 8000848:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	4619      	mov	r1, r3
 8000850:	4808      	ldr	r0, [pc, #32]	; (8000874 <MX_GPIO_Init+0x104>)
 8000852:	f000 fdfd 	bl	8001450 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2100      	movs	r1, #0
 800085a:	2028      	movs	r0, #40	; 0x28
 800085c:	f000 fdc3 	bl	80013e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000860:	2028      	movs	r0, #40	; 0x28
 8000862:	f000 fdda 	bl	800141a <HAL_NVIC_EnableIRQ>

}
 8000866:	bf00      	nop
 8000868:	3728      	adds	r7, #40	; 0x28
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40021000 	.word	0x40021000
 8000874:	48000400 	.word	0x48000400
 8000878:	48000800 	.word	0x48000800

0800087c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000880:	b672      	cpsid	i
}
 8000882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000884:	e7fe      	b.n	8000884 <Error_Handler+0x8>
	...

08000888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <HAL_MspInit+0x44>)
 8000890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000892:	4a0e      	ldr	r2, [pc, #56]	; (80008cc <HAL_MspInit+0x44>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6613      	str	r3, [r2, #96]	; 0x60
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <HAL_MspInit+0x44>)
 800089c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <HAL_MspInit+0x44>)
 80008a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008aa:	4a08      	ldr	r2, [pc, #32]	; (80008cc <HAL_MspInit+0x44>)
 80008ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b0:	6593      	str	r3, [r2, #88]	; 0x58
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <HAL_MspInit+0x44>)
 80008b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008be:	f001 f841 	bl	8001944 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40021000 	.word	0x40021000

080008d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b09e      	sub	sp, #120	; 0x78
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008e8:	f107 0310 	add.w	r3, r7, #16
 80008ec:	2254      	movs	r2, #84	; 0x54
 80008ee:	2100      	movs	r1, #0
 80008f0:	4618      	mov	r0, r3
 80008f2:	f003 fb71 	bl	8003fd8 <memset>
  if(huart->Instance==LPUART1)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a1f      	ldr	r2, [pc, #124]	; (8000978 <HAL_UART_MspInit+0xa8>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d136      	bne.n	800096e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000900:	2320      	movs	r3, #32
 8000902:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000908:	f107 0310 	add.w	r3, r7, #16
 800090c:	4618      	mov	r0, r3
 800090e:	f001 fd5d 	bl	80023cc <HAL_RCCEx_PeriphCLKConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000918:	f7ff ffb0 	bl	800087c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <HAL_UART_MspInit+0xac>)
 800091e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000920:	4a16      	ldr	r2, [pc, #88]	; (800097c <HAL_UART_MspInit+0xac>)
 8000922:	f043 0301 	orr.w	r3, r3, #1
 8000926:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000928:	4b14      	ldr	r3, [pc, #80]	; (800097c <HAL_UART_MspInit+0xac>)
 800092a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800092c:	f003 0301 	and.w	r3, r3, #1
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <HAL_UART_MspInit+0xac>)
 8000936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000938:	4a10      	ldr	r2, [pc, #64]	; (800097c <HAL_UART_MspInit+0xac>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000940:	4b0e      	ldr	r3, [pc, #56]	; (800097c <HAL_UART_MspInit+0xac>)
 8000942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000944:	f003 0301 	and.w	r3, r3, #1
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800094c:	230c      	movs	r3, #12
 800094e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000950:	2302      	movs	r3, #2
 8000952:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800095c:	230c      	movs	r3, #12
 800095e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000960:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000964:	4619      	mov	r1, r3
 8000966:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096a:	f000 fd71 	bl	8001450 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800096e:	bf00      	nop
 8000970:	3778      	adds	r7, #120	; 0x78
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40008000 	.word	0x40008000
 800097c:	40021000 	.word	0x40021000

08000980 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a17      	ldr	r2, [pc, #92]	; (80009fc <HAL_SPI_MspInit+0x7c>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d128      	bne.n	80009f4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009a2:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <HAL_SPI_MspInit+0x80>)
 80009a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a6:	4a16      	ldr	r2, [pc, #88]	; (8000a00 <HAL_SPI_MspInit+0x80>)
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ac:	6593      	str	r3, [r2, #88]	; 0x58
 80009ae:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <HAL_SPI_MspInit+0x80>)
 80009b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <HAL_SPI_MspInit+0x80>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	4a10      	ldr	r2, [pc, #64]	; (8000a00 <HAL_SPI_MspInit+0x80>)
 80009c0:	f043 0302 	orr.w	r3, r3, #2
 80009c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <HAL_SPI_MspInit+0x80>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80009d2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80009d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009dc:	2302      	movs	r3, #2
 80009de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e0:	2302      	movs	r3, #2
 80009e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009e4:	2305      	movs	r3, #5
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	4619      	mov	r1, r3
 80009ee:	4805      	ldr	r0, [pc, #20]	; (8000a04 <HAL_SPI_MspInit+0x84>)
 80009f0:	f000 fd2e 	bl	8001450 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80009f4:	bf00      	nop
 80009f6:	3728      	adds	r7, #40	; 0x28
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40003800 	.word	0x40003800
 8000a00:	40021000 	.word	0x40021000
 8000a04:	48000400 	.word	0x48000400

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <NMI_Handler+0x4>

08000a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <HardFault_Handler+0x4>

08000a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <MemManage_Handler+0x4>

08000a1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <BusFault_Handler+0x4>

08000a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <UsageFault_Handler+0x4>

08000a26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a54:	f000 fbac 	bl	80011b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a60:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a64:	f000 fea6 	bl	80017b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <SystemInit+0x20>)
 8000a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a76:	4a05      	ldr	r2, [pc, #20]	; (8000a8c <SystemInit+0x20>)
 8000a78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a90:	480d      	ldr	r0, [pc, #52]	; (8000ac8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a92:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a94:	480d      	ldr	r0, [pc, #52]	; (8000acc <LoopForever+0x6>)
  ldr r1, =_edata
 8000a96:	490e      	ldr	r1, [pc, #56]	; (8000ad0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a98:	4a0e      	ldr	r2, [pc, #56]	; (8000ad4 <LoopForever+0xe>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a9c:	e002      	b.n	8000aa4 <LoopCopyDataInit>

08000a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa2:	3304      	adds	r3, #4

08000aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa8:	d3f9      	bcc.n	8000a9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ad8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aac:	4c0b      	ldr	r4, [pc, #44]	; (8000adc <LoopForever+0x16>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab0:	e001      	b.n	8000ab6 <LoopFillZerobss>

08000ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab4:	3204      	adds	r2, #4

08000ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab8:	d3fb      	bcc.n	8000ab2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000aba:	f7ff ffd7 	bl	8000a6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000abe:	f003 fa67 	bl	8003f90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ac2:	f7ff fd2b 	bl	800051c <main>

08000ac6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ac6:	e7fe      	b.n	8000ac6 <LoopForever>
  ldr   r0, =_estack
 8000ac8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ad4:	08004050 	.word	0x08004050
  ldr r2, =_sbss
 8000ad8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000adc:	20017c50 	.word	0x20017c50

08000ae0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ae0:	e7fe      	b.n	8000ae0 <ADC1_2_IRQHandler>

08000ae2 <getIT8951Info>:
 *  Created on: Apr 22, 2023
 *      Author: senne
 */
#include "../../Eink_interface/Inc/Eink_driver.h"

void getIT8951Info(SPI_HandleTypeDef *spi, IT8951Info *container) {
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b090      	sub	sp, #64	; 0x40
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
 8000aea:	6039      	str	r1, [r7, #0]
	uint16_t rawData[20];

	LCDWriteCmdCode(spi, 0x0302);
 8000aec:	f240 3102 	movw	r1, #770	; 0x302
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f000 f9c5 	bl	8000e80 <LCDWriteCmdCode>
	LCDReadNData(spi,rawData,20);
 8000af6:	f107 030c 	add.w	r3, r7, #12
 8000afa:	2214      	movs	r2, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f000 fa38 	bl	8000f74 <LCDReadNData>
	container->screenWidth 	= rawData[0];
 8000b04:	89ba      	ldrh	r2, [r7, #12]
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	801a      	strh	r2, [r3, #0]
	container->screenHeight = rawData[1];
 8000b0a:	89fa      	ldrh	r2, [r7, #14]
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	805a      	strh	r2, [r3, #2]

	container->imageBufferAddress 	= rawData[2] | (rawData[3] << 16);
 8000b10:	8a3b      	ldrh	r3, [r7, #16]
 8000b12:	b21a      	sxth	r2, r3
 8000b14:	8a7b      	ldrh	r3, [r7, #18]
 8000b16:	041b      	lsls	r3, r3, #16
 8000b18:	b21b      	sxth	r3, r3
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	b21b      	sxth	r3, r3
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	809a      	strh	r2, [r3, #4]

	int j=0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (int i = 4; i <= 11; i++) {
 8000b28:	2304      	movs	r3, #4
 8000b2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8000b2c:	e021      	b.n	8000b72 <getIT8951Info+0x90>
		container->IT8951version[j] 	= (rawData[i] >> 8);
 8000b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	3340      	adds	r3, #64	; 0x40
 8000b34:	443b      	add	r3, r7
 8000b36:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8000b3a:	0a1b      	lsrs	r3, r3, #8
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	b2d9      	uxtb	r1, r3
 8000b40:	683a      	ldr	r2, [r7, #0]
 8000b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b44:	4413      	add	r3, r2
 8000b46:	3306      	adds	r3, #6
 8000b48:	460a      	mov	r2, r1
 8000b4a:	701a      	strb	r2, [r3, #0]
		container->IT8951version[j + 1] = (rawData[i] & 0xff);
 8000b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	3340      	adds	r3, #64	; 0x40
 8000b52:	443b      	add	r3, r7
 8000b54:	f833 2c34 	ldrh.w	r2, [r3, #-52]
 8000b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	b2d1      	uxtb	r1, r2
 8000b5e:	683a      	ldr	r2, [r7, #0]
 8000b60:	4413      	add	r3, r2
 8000b62:	460a      	mov	r2, r1
 8000b64:	719a      	strb	r2, [r3, #6]
		j += 2;
 8000b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b68:	3302      	adds	r3, #2
 8000b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (int i = 4; i <= 11; i++) {
 8000b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b6e:	3301      	adds	r3, #1
 8000b70:	63bb      	str	r3, [r7, #56]	; 0x38
 8000b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b74:	2b0b      	cmp	r3, #11
 8000b76:	ddda      	ble.n	8000b2e <getIT8951Info+0x4c>
	}

	j = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (int i = 12; i <= 19; i++) {
 8000b7c:	230c      	movs	r3, #12
 8000b7e:	637b      	str	r3, [r7, #52]	; 0x34
 8000b80:	e021      	b.n	8000bc6 <getIT8951Info+0xe4>
		container->LUTversion[j] 	 = (rawData[i] >> 8);
 8000b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	3340      	adds	r3, #64	; 0x40
 8000b88:	443b      	add	r3, r7
 8000b8a:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8000b8e:	0a1b      	lsrs	r3, r3, #8
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	b2d9      	uxtb	r1, r3
 8000b94:	683a      	ldr	r2, [r7, #0]
 8000b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b98:	4413      	add	r3, r2
 8000b9a:	3316      	adds	r3, #22
 8000b9c:	460a      	mov	r2, r1
 8000b9e:	701a      	strb	r2, [r3, #0]
		container->LUTversion[j + 1] = (rawData[i] & 0xff);
 8000ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	3340      	adds	r3, #64	; 0x40
 8000ba6:	443b      	add	r3, r7
 8000ba8:	f833 2c34 	ldrh.w	r2, [r3, #-52]
 8000bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bae:	3301      	adds	r3, #1
 8000bb0:	b2d1      	uxtb	r1, r2
 8000bb2:	683a      	ldr	r2, [r7, #0]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	460a      	mov	r2, r1
 8000bb8:	759a      	strb	r2, [r3, #22]
		j += 2;
 8000bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bbc:	3302      	adds	r3, #2
 8000bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (int i = 12; i <= 19; i++) {
 8000bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8000bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bc8:	2b13      	cmp	r3, #19
 8000bca:	ddda      	ble.n	8000b82 <getIT8951Info+0xa0>
	}
}
 8000bcc:	bf00      	nop
 8000bce:	bf00      	nop
 8000bd0:	3740      	adds	r7, #64	; 0x40
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <writeScreenRegister>:
	LCDWriteData(spi, address);
	return LCDReadData(spi);
}

void writeScreenRegister(SPI_HandleTypeDef *spi, uint16_t address, uint16_t value)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
 8000bde:	460b      	mov	r3, r1
 8000be0:	807b      	strh	r3, [r7, #2]
 8000be2:	4613      	mov	r3, r2
 8000be4:	803b      	strh	r3, [r7, #0]
	//I80 Mode
	//Send Cmd , Register Address and Write Value
	LCDWriteCmdCode(spi, IT8951_TCON_REG_WR);
 8000be6:	2111      	movs	r1, #17
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f000 f949 	bl	8000e80 <LCDWriteCmdCode>
	LCDWriteData(spi, address);
 8000bee:	887b      	ldrh	r3, [r7, #2]
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f000 f982 	bl	8000efc <LCDWriteData>
	LCDWriteData(spi, value);
 8000bf8:	883b      	ldrh	r3, [r7, #0]
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f000 f97d 	bl	8000efc <LCDWriteData>
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <IT8951SetImgBufBaseAddr>:
	//Check IT8951 Register LUTAFSR => NonZero - Busy, 0 - Free
	while(readScreenRegister(spi, LUTAFSR));
}

void IT8951SetImgBufBaseAddr(SPI_HandleTypeDef *spi, uint16_t ulImgBufAddr)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b084      	sub	sp, #16
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	460b      	mov	r3, r1
 8000c14:	807b      	strh	r3, [r7, #2]
	uint16_t usWordH = (uint16_t)((ulImgBufAddr >> 16) & 0x0000FFFF);
 8000c16:	887b      	ldrh	r3, [r7, #2]
 8000c18:	141b      	asrs	r3, r3, #16
 8000c1a:	81fb      	strh	r3, [r7, #14]
	uint16_t usWordL = (uint16_t)( ulImgBufAddr & 0x0000FFFF);
 8000c1c:	887b      	ldrh	r3, [r7, #2]
 8000c1e:	81bb      	strh	r3, [r7, #12]
	//Write LISAR Reg
	writeScreenRegister(spi, LISAR + 2 ,usWordH);
 8000c20:	89fb      	ldrh	r3, [r7, #14]
 8000c22:	461a      	mov	r2, r3
 8000c24:	f240 210a 	movw	r1, #522	; 0x20a
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff ffd4 	bl	8000bd6 <writeScreenRegister>
	writeScreenRegister(spi, LISAR ,usWordL);
 8000c2e:	89bb      	ldrh	r3, [r7, #12]
 8000c30:	461a      	mov	r2, r3
 8000c32:	f44f 7102 	mov.w	r1, #520	; 0x208
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff ffcd 	bl	8000bd6 <writeScreenRegister>
}
 8000c3c:	bf00      	nop
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <LCDSendCmdArg>:

void LCDSendCmdArg(SPI_HandleTypeDef *spi, uint16_t cmd,uint16_t* args, uint16_t numArgs)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	607a      	str	r2, [r7, #4]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	460b      	mov	r3, r1
 8000c52:	817b      	strh	r3, [r7, #10]
 8000c54:	4613      	mov	r3, r2
 8000c56:	813b      	strh	r3, [r7, #8]
     //Send Cmd code
     LCDWriteCmdCode(spi, cmd);
 8000c58:	897b      	ldrh	r3, [r7, #10]
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	68f8      	ldr	r0, [r7, #12]
 8000c5e:	f000 f90f 	bl	8000e80 <LCDWriteCmdCode>
     //Send Data
     for(uint16_t i=0;i<numArgs;i++)
 8000c62:	2300      	movs	r3, #0
 8000c64:	82fb      	strh	r3, [r7, #22]
 8000c66:	e00b      	b.n	8000c80 <LCDSendCmdArg+0x3c>
     {
         LCDWriteData(spi, args[i]);
 8000c68:	8afb      	ldrh	r3, [r7, #22]
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	4413      	add	r3, r2
 8000c70:	881b      	ldrh	r3, [r3, #0]
 8000c72:	4619      	mov	r1, r3
 8000c74:	68f8      	ldr	r0, [r7, #12]
 8000c76:	f000 f941 	bl	8000efc <LCDWriteData>
     for(uint16_t i=0;i<numArgs;i++)
 8000c7a:	8afb      	ldrh	r3, [r7, #22]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	82fb      	strh	r3, [r7, #22]
 8000c80:	8afa      	ldrh	r2, [r7, #22]
 8000c82:	893b      	ldrh	r3, [r7, #8]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d3ef      	bcc.n	8000c68 <LCDSendCmdArg+0x24>
     }
}
 8000c88:	bf00      	nop
 8000c8a:	bf00      	nop
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <IT8951LoadImgAreaStart>:

void IT8951LoadImgAreaStart(SPI_HandleTypeDef *spi, ImageLoadSettings* settings)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b086      	sub	sp, #24
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
 8000c9a:	6039      	str	r1, [r7, #0]
	uint16_t usArg[5];
    //Setting Argument for Load image start
    usArg[0] = (settings->endianType << 8 )
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	021b      	lsls	r3, r3, #8
    |(settings->pixelFormat << 4)
 8000ca2:	b21a      	sxth	r2, r3
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	885b      	ldrh	r3, [r3, #2]
 8000ca8:	011b      	lsls	r3, r3, #4
 8000caa:	b21b      	sxth	r3, r3
 8000cac:	4313      	orrs	r3, r2
 8000cae:	b21a      	sxth	r2, r3
    |(settings->rotation);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	889b      	ldrh	r3, [r3, #4]
 8000cb4:	b21b      	sxth	r3, r3
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	b21b      	sxth	r3, r3
 8000cba:	b29b      	uxth	r3, r3
    usArg[0] = (settings->endianType << 8 )
 8000cbc:	81bb      	strh	r3, [r7, #12]
    usArg[1] = settings->xBegin;
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	88db      	ldrh	r3, [r3, #6]
 8000cc2:	81fb      	strh	r3, [r7, #14]
    usArg[2] = settings->xWidth;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	891b      	ldrh	r3, [r3, #8]
 8000cc8:	823b      	strh	r3, [r7, #16]
    usArg[3] = settings->yBegin;
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	895b      	ldrh	r3, [r3, #10]
 8000cce:	827b      	strh	r3, [r7, #18]
    usArg[4] = settings->yHeight;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	899b      	ldrh	r3, [r3, #12]
 8000cd4:	82bb      	strh	r3, [r7, #20]
    //Send Cmd and Args
    LCDSendCmdArg(spi, IT8951_TCON_LD_IMG_AREA , usArg , 5);
 8000cd6:	f107 020c 	add.w	r2, r7, #12
 8000cda:	2305      	movs	r3, #5
 8000cdc:	2121      	movs	r1, #33	; 0x21
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff ffb0 	bl	8000c44 <LCDSendCmdArg>
}
 8000ce4:	bf00      	nop
 8000ce6:	3718      	adds	r7, #24
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <IT8951LoadImgEnd>:

void IT8951LoadImgEnd(SPI_HandleTypeDef *spi)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
    LCDWriteCmdCode(spi, IT8951_TCON_LD_IMG_END);
 8000cf4:	2122      	movs	r1, #34	; 0x22
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f000 f8c2 	bl	8000e80 <LCDWriteCmdCode>
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <IT8951HostAreaPackedPixelWrite>:

void IT8951HostAreaPackedPixelWrite(SPI_HandleTypeDef *spi, IT8951Info *screenValues, ImageLoadSettings* settings, uint16_t* FrameBuf)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
 8000d10:	603b      	str	r3, [r7, #0]
	//Source buffer address of Host
	uint16_t* pusFrameBuf = (uint16_t*)FrameBuf;
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	617b      	str	r3, [r7, #20]

	//Set Image buffer(IT8951) Base address
	IT8951SetImgBufBaseAddr(spi, screenValues->imageBufferAddress);
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	889b      	ldrh	r3, [r3, #4]
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	68f8      	ldr	r0, [r7, #12]
 8000d1e:	f7ff ff74 	bl	8000c0a <IT8951SetImgBufBaseAddr>
	//Send Load Image start Cmd
	IT8951LoadImgAreaStart(spi, settings);
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	68f8      	ldr	r0, [r7, #12]
 8000d26:	f7ff ffb4 	bl	8000c92 <IT8951LoadImgAreaStart>
	//Host Write Data
	for(uint16_t j=0;j< settings->yHeight;j++)
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	827b      	strh	r3, [r7, #18]
 8000d2e:	e018      	b.n	8000d62 <IT8951HostAreaPackedPixelWrite+0x5e>
	{
		 for(uint16_t i=0;i< settings->xWidth/2;i++)
 8000d30:	2300      	movs	r3, #0
 8000d32:	823b      	strh	r3, [r7, #16]
 8000d34:	e00b      	b.n	8000d4e <IT8951HostAreaPackedPixelWrite+0x4a>
			{
					//Write a Word(2-Bytes) for each time
					LCDWriteData(spi ,*pusFrameBuf);
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	881b      	ldrh	r3, [r3, #0]
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	68f8      	ldr	r0, [r7, #12]
 8000d3e:	f000 f8dd 	bl	8000efc <LCDWriteData>
					pusFrameBuf++;
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	3302      	adds	r3, #2
 8000d46:	617b      	str	r3, [r7, #20]
		 for(uint16_t i=0;i< settings->xWidth/2;i++)
 8000d48:	8a3b      	ldrh	r3, [r7, #16]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	823b      	strh	r3, [r7, #16]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	891b      	ldrh	r3, [r3, #8]
 8000d52:	085b      	lsrs	r3, r3, #1
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	8a3a      	ldrh	r2, [r7, #16]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d3ec      	bcc.n	8000d36 <IT8951HostAreaPackedPixelWrite+0x32>
	for(uint16_t j=0;j< settings->yHeight;j++)
 8000d5c:	8a7b      	ldrh	r3, [r7, #18]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	827b      	strh	r3, [r7, #18]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	899b      	ldrh	r3, [r3, #12]
 8000d66:	8a7a      	ldrh	r2, [r7, #18]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d3e1      	bcc.n	8000d30 <IT8951HostAreaPackedPixelWrite+0x2c>
			}
	}
	//Send Load Img End Command
	IT8951LoadImgEnd(spi);
 8000d6c:	68f8      	ldr	r0, [r7, #12]
 8000d6e:	f7ff ffbd 	bl	8000cec <IT8951LoadImgEnd>
}
 8000d72:	bf00      	nop
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <IT8951DisplayArea>:

void IT8951DisplayArea(SPI_HandleTypeDef *spi, ImageLoadSettings* settings, uint16_t displayMode)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b084      	sub	sp, #16
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	60f8      	str	r0, [r7, #12]
 8000d82:	60b9      	str	r1, [r7, #8]
 8000d84:	4613      	mov	r3, r2
 8000d86:	80fb      	strh	r3, [r7, #6]
	//Send I80 Display Command (User defined command of IT8951)
	LCDWriteCmdCode(spi, USDEF_I80_CMD_DPY_AREA); //0x0034
 8000d88:	2134      	movs	r1, #52	; 0x34
 8000d8a:	68f8      	ldr	r0, [r7, #12]
 8000d8c:	f000 f878 	bl	8000e80 <LCDWriteCmdCode>
	//Write arguments
	LCDWriteData(spi, settings->xBegin);
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	88db      	ldrh	r3, [r3, #6]
 8000d94:	4619      	mov	r1, r3
 8000d96:	68f8      	ldr	r0, [r7, #12]
 8000d98:	f000 f8b0 	bl	8000efc <LCDWriteData>
	LCDWriteData(spi, settings->yBegin);
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	895b      	ldrh	r3, [r3, #10]
 8000da0:	4619      	mov	r1, r3
 8000da2:	68f8      	ldr	r0, [r7, #12]
 8000da4:	f000 f8aa 	bl	8000efc <LCDWriteData>
	LCDWriteData(spi, settings->xWidth);
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	891b      	ldrh	r3, [r3, #8]
 8000dac:	4619      	mov	r1, r3
 8000dae:	68f8      	ldr	r0, [r7, #12]
 8000db0:	f000 f8a4 	bl	8000efc <LCDWriteData>
	LCDWriteData(spi, settings->yHeight);
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	899b      	ldrh	r3, [r3, #12]
 8000db8:	4619      	mov	r1, r3
 8000dba:	68f8      	ldr	r0, [r7, #12]
 8000dbc:	f000 f89e 	bl	8000efc <LCDWriteData>
	LCDWriteData(spi, displayMode);
 8000dc0:	88fb      	ldrh	r3, [r7, #6]
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	68f8      	ldr	r0, [r7, #12]
 8000dc6:	f000 f899 	bl	8000efc <LCDWriteData>
}
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <resetDelay>:
#include "../../Eink_interface/Inc/Eink_driver.h"

#define wait 10L

void resetDelay()
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	b083      	sub	sp, #12
 8000dd6:	af00      	add	r7, sp, #0
	for (int i=0;i<10000;i++)
 8000dd8:	2300      	movs	r3, #0
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	e00b      	b.n	8000df6 <resetDelay+0x24>
		for (int j=0;j<10;j++);
 8000dde:	2300      	movs	r3, #0
 8000de0:	603b      	str	r3, [r7, #0]
 8000de2:	e002      	b.n	8000dea <resetDelay+0x18>
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	3301      	adds	r3, #1
 8000de8:	603b      	str	r3, [r7, #0]
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	2b09      	cmp	r3, #9
 8000dee:	ddf9      	ble.n	8000de4 <resetDelay+0x12>
	for (int i=0;i<10000;i++)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3301      	adds	r3, #1
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f242 720f 	movw	r2, #9999	; 0x270f
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	ddee      	ble.n	8000dde <resetDelay+0xc>
}
 8000e00:	bf00      	nop
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <setWordToArray>:

void setWordToArray(uint8_t* wordArray,uint16_t word) {
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
 8000e16:	460b      	mov	r3, r1
 8000e18:	807b      	strh	r3, [r7, #2]
	wordArray[1]=(word >> 8);
 8000e1a:	887b      	ldrh	r3, [r7, #2]
 8000e1c:	0a1b      	lsrs	r3, r3, #8
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3301      	adds	r3, #1
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	701a      	strb	r2, [r3, #0]
	wordArray[0]= word & 0xff;
 8000e28:	887b      	ldrh	r3, [r7, #2]
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	701a      	strb	r2, [r3, #0]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <resetDriver>:

void resetDriver() {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5, GPIO_PIN_RESET);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2120      	movs	r1, #32
 8000e44:	4806      	ldr	r0, [pc, #24]	; (8000e60 <resetDriver+0x24>)
 8000e46:	f000 fc9d 	bl	8001784 <HAL_GPIO_WritePin>
	resetDelay();
 8000e4a:	f7ff ffc2 	bl	8000dd2 <resetDelay>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5, GPIO_PIN_SET);
 8000e4e:	2201      	movs	r2, #1
 8000e50:	2120      	movs	r1, #32
 8000e52:	4803      	ldr	r0, [pc, #12]	; (8000e60 <resetDriver+0x24>)
 8000e54:	f000 fc96 	bl	8001784 <HAL_GPIO_WritePin>
	resetDelay();
 8000e58:	f7ff ffbb 	bl	8000dd2 <resetDelay>
}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	48000800 	.word	0x48000800

08000e64 <LCDWaitForReady>:

void LCDWaitForReady()
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 0)
 8000e68:	bf00      	nop
 8000e6a:	2180      	movs	r1, #128	; 0x80
 8000e6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e70:	f000 fc70 	bl	8001754 <HAL_GPIO_ReadPin>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d0f7      	beq.n	8000e6a <LCDWaitForReady+0x6>
	{
	}
}
 8000e7a:	bf00      	nop
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <LCDWriteCmdCode>:

//-----------------------------------------------------------------
//Host controller function 2   Write command code to host data Bus
//-----------------------------------------------------------------
void LCDWriteCmdCode(SPI_HandleTypeDef *spi ,uint16_t cmd)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	807b      	strh	r3, [r7, #2]
	uint8_t towrite[2];
	setWordToArray(towrite, 0x6000); //Set Preamble for Write Command, which is 0x6000
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ffba 	bl	8000e0e <setWordToArray>

	//set CS LOW
	LCDWaitForReady();
 8000e9a:	f7ff ffe3 	bl	8000e64 <LCDWaitForReady>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ea4:	4814      	ldr	r0, [pc, #80]	; (8000ef8 <LCDWriteCmdCode+0x78>)
 8000ea6:	f000 fc6d 	bl	8001784 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(spi, towrite, 1, 1000);
 8000eaa:	f107 010c 	add.w	r1, r7, #12
 8000eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f001 fd82 	bl	80029be <HAL_SPI_Transmit>

	setWordToArray(towrite, cmd);
 8000eba:	887a      	ldrh	r2, [r7, #2]
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	4611      	mov	r1, r2
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ffa3 	bl	8000e0e <setWordToArray>

	LCDWaitForReady();
 8000ec8:	f7ff ffcc 	bl	8000e64 <LCDWaitForReady>
	HAL_SPI_Transmit(spi, towrite, 1, 1000);
 8000ecc:	f107 010c 	add.w	r1, r7, #12
 8000ed0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f001 fd71 	bl	80029be <HAL_SPI_Transmit>

	HAL_Delay(wait);
 8000edc:	200a      	movs	r0, #10
 8000ede:	f000 f985 	bl	80011ec <HAL_Delay>

	//set CS HIGH
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee8:	4803      	ldr	r0, [pc, #12]	; (8000ef8 <LCDWriteCmdCode+0x78>)
 8000eea:	f000 fc4b 	bl	8001784 <HAL_GPIO_WritePin>
}
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	48000400 	.word	0x48000400

08000efc <LCDWriteData>:

//-----------------------------------------------------------
//Host controller function 3    Write Data to host data Bus
//-----------------------------------------------------------
void LCDWriteData(SPI_HandleTypeDef *spi, uint16_t data)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	807b      	strh	r3, [r7, #2]
	uint8_t towrite[2];
	setWordToArray(towrite, 0x0000); //Set Preamble for Write data, which is 0x0000
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ff7d 	bl	8000e0e <setWordToArray>

	//set CS LOW
	LCDWaitForReady();
 8000f14:	f7ff ffa6 	bl	8000e64 <LCDWaitForReady>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f1e:	4814      	ldr	r0, [pc, #80]	; (8000f70 <LCDWriteData+0x74>)
 8000f20:	f000 fc30 	bl	8001784 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(spi, towrite, 1, 1000);
 8000f24:	f107 010c 	add.w	r1, r7, #12
 8000f28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f001 fd45 	bl	80029be <HAL_SPI_Transmit>

	setWordToArray(towrite, data);
 8000f34:	887a      	ldrh	r2, [r7, #2]
 8000f36:	f107 030c 	add.w	r3, r7, #12
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff66 	bl	8000e0e <setWordToArray>

	LCDWaitForReady();
 8000f42:	f7ff ff8f 	bl	8000e64 <LCDWaitForReady>
	HAL_SPI_Transmit(spi, towrite, 1, 1000);
 8000f46:	f107 010c 	add.w	r1, r7, #12
 8000f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4e:	2201      	movs	r2, #1
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f001 fd34 	bl	80029be <HAL_SPI_Transmit>

	HAL_Delay(wait);
 8000f56:	200a      	movs	r0, #10
 8000f58:	f000 f948 	bl	80011ec <HAL_Delay>

	//set CS HIGH
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f62:	4803      	ldr	r0, [pc, #12]	; (8000f70 <LCDWriteData+0x74>)
 8000f64:	f000 fc0e 	bl	8001784 <HAL_GPIO_WritePin>
}
 8000f68:	bf00      	nop
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	48000400 	.word	0x48000400

08000f74 <LCDReadNData>:

//-------------------------------------------------------------------
//  Read Burst N words Data
//-------------------------------------------------------------------
void LCDReadNData(SPI_HandleTypeDef *spi, uint16_t* resultBuf, uint16_t resultWordCnt)
{
 8000f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f78:	b091      	sub	sp, #68	; 0x44
 8000f7a:	af02      	add	r7, sp, #8
 8000f7c:	6178      	str	r0, [r7, #20]
 8000f7e:	6139      	str	r1, [r7, #16]
 8000f80:	4613      	mov	r3, r2
 8000f82:	81fb      	strh	r3, [r7, #14]
 8000f84:	466b      	mov	r3, sp
 8000f86:	461e      	mov	r6, r3
	uint8_t dummySend[resultWordCnt*2];
 8000f88:	89fb      	ldrh	r3, [r7, #14]
 8000f8a:	0059      	lsls	r1, r3, #1
 8000f8c:	1e4b      	subs	r3, r1, #1
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f90:	460a      	mov	r2, r1
 8000f92:	2300      	movs	r3, #0
 8000f94:	603a      	str	r2, [r7, #0]
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	f04f 0200 	mov.w	r2, #0
 8000f9c:	f04f 0300 	mov.w	r3, #0
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	00c3      	lsls	r3, r0, #3
 8000fa4:	6838      	ldr	r0, [r7, #0]
 8000fa6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000faa:	6838      	ldr	r0, [r7, #0]
 8000fac:	00c2      	lsls	r2, r0, #3
 8000fae:	460a      	mov	r2, r1
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	4692      	mov	sl, r2
 8000fb4:	469b      	mov	fp, r3
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	f04f 0300 	mov.w	r3, #0
 8000fbe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000fc2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000fc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000fca:	460b      	mov	r3, r1
 8000fcc:	3307      	adds	r3, #7
 8000fce:	08db      	lsrs	r3, r3, #3
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	ebad 0d03 	sub.w	sp, sp, r3
 8000fd6:	ab02      	add	r3, sp, #8
 8000fd8:	3300      	adds	r3, #0
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
	for (int i=0; i < resultWordCnt*2;i++) {
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fe0:	e007      	b.n	8000ff2 <LCDReadNData+0x7e>
		dummySend[i]= 0x00;
 8000fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe6:	4413      	add	r3, r2
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < resultWordCnt*2;i++) {
 8000fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fee:	3301      	adds	r3, #1
 8000ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ff2:	89fb      	ldrh	r3, [r7, #14]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	dbf2      	blt.n	8000fe2 <LCDReadNData+0x6e>
	}

	uint8_t rawResult[resultWordCnt*2];
 8000ffc:	89fb      	ldrh	r3, [r7, #14]
 8000ffe:	0059      	lsls	r1, r3, #1
 8001000:	466b      	mov	r3, sp
 8001002:	469a      	mov	sl, r3
 8001004:	1e4b      	subs	r3, r1, #1
 8001006:	623b      	str	r3, [r7, #32]
 8001008:	460a      	mov	r2, r1
 800100a:	2300      	movs	r3, #0
 800100c:	4690      	mov	r8, r2
 800100e:	4699      	mov	r9, r3
 8001010:	f04f 0200 	mov.w	r2, #0
 8001014:	f04f 0300 	mov.w	r3, #0
 8001018:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800101c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001020:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001024:	460a      	mov	r2, r1
 8001026:	2300      	movs	r3, #0
 8001028:	4614      	mov	r4, r2
 800102a:	461d      	mov	r5, r3
 800102c:	f04f 0200 	mov.w	r2, #0
 8001030:	f04f 0300 	mov.w	r3, #0
 8001034:	00eb      	lsls	r3, r5, #3
 8001036:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800103a:	00e2      	lsls	r2, r4, #3
 800103c:	460b      	mov	r3, r1
 800103e:	3307      	adds	r3, #7
 8001040:	08db      	lsrs	r3, r3, #3
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	ebad 0d03 	sub.w	sp, sp, r3
 8001048:	ab02      	add	r3, sp, #8
 800104a:	3300      	adds	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
	//set type and direction
	uint8_t preamble[2];
	//Set Preamble for Read data, which is 0x1000
	setWordToArray(preamble, 0x1000);
 800104e:	f107 0318 	add.w	r3, r7, #24
 8001052:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fed9 	bl	8000e0e <setWordToArray>

	LCDWaitForReady();
 800105c:	f7ff ff02 	bl	8000e64 <LCDWaitForReady>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8001060:	2200      	movs	r2, #0
 8001062:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001066:	4828      	ldr	r0, [pc, #160]	; (8001108 <LCDReadNData+0x194>)
 8001068:	f000 fb8c 	bl	8001784 <HAL_GPIO_WritePin>

	//Send Preamble before reading data
	HAL_SPI_Transmit(spi, preamble, 1, 1000);
 800106c:	f107 0118 	add.w	r1, r7, #24
 8001070:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001074:	2201      	movs	r2, #1
 8001076:	6978      	ldr	r0, [r7, #20]
 8001078:	f001 fca1 	bl	80029be <HAL_SPI_Transmit>

	LCDWaitForReady();
 800107c:	f7ff fef2 	bl	8000e64 <LCDWaitForReady>
	HAL_SPI_TransmitReceive(spi, dummySend, rawResult, 1, 1000);
 8001080:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	2301      	movs	r3, #1
 8001088:	69fa      	ldr	r2, [r7, #28]
 800108a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800108c:	6978      	ldr	r0, [r7, #20]
 800108e:	f001 fe04 	bl	8002c9a <HAL_SPI_TransmitReceive>

	LCDWaitForReady();
 8001092:	f7ff fee7 	bl	8000e64 <LCDWaitForReady>
	HAL_SPI_TransmitReceive(spi, dummySend, rawResult, resultWordCnt, 1000);
 8001096:	89fb      	ldrh	r3, [r7, #14]
 8001098:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800109c:	9200      	str	r2, [sp, #0]
 800109e:	69fa      	ldr	r2, [r7, #28]
 80010a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010a2:	6978      	ldr	r0, [r7, #20]
 80010a4:	f001 fdf9 	bl	8002c9a <HAL_SPI_TransmitReceive>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 80010a8:	2201      	movs	r2, #1
 80010aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ae:	4816      	ldr	r0, [pc, #88]	; (8001108 <LCDReadNData+0x194>)
 80010b0:	f000 fb68 	bl	8001784 <HAL_GPIO_WritePin>

	int j = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	633b      	str	r3, [r7, #48]	; 0x30
	for (int i= 0; i < resultWordCnt; i++) {
 80010b8:	2300      	movs	r3, #0
 80010ba:	637b      	str	r3, [r7, #52]	; 0x34
 80010bc:	e018      	b.n	80010f0 <LCDReadNData+0x17c>
		resultBuf[i] = rawResult[j] + (rawResult[j + 1] << 8);
 80010be:	69fa      	ldr	r2, [r7, #28]
 80010c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010c2:	4413      	add	r3, r2
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	b299      	uxth	r1, r3
 80010c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ca:	3301      	adds	r3, #1
 80010cc:	69fa      	ldr	r2, [r7, #28]
 80010ce:	5cd3      	ldrb	r3, [r2, r3]
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	021b      	lsls	r3, r3, #8
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	6938      	ldr	r0, [r7, #16]
 80010dc:	4403      	add	r3, r0
 80010de:	440a      	add	r2, r1
 80010e0:	b292      	uxth	r2, r2
 80010e2:	801a      	strh	r2, [r3, #0]
		j += 2;
 80010e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010e6:	3302      	adds	r3, #2
 80010e8:	633b      	str	r3, [r7, #48]	; 0x30
	for (int i= 0; i < resultWordCnt; i++) {
 80010ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ec:	3301      	adds	r3, #1
 80010ee:	637b      	str	r3, [r7, #52]	; 0x34
 80010f0:	89fb      	ldrh	r3, [r7, #14]
 80010f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010f4:	429a      	cmp	r2, r3
 80010f6:	dbe2      	blt.n	80010be <LCDReadNData+0x14a>
 80010f8:	46d5      	mov	sp, sl
 80010fa:	46b5      	mov	sp, r6
	}
}
 80010fc:	bf00      	nop
 80010fe:	373c      	adds	r7, #60	; 0x3c
 8001100:	46bd      	mov	sp, r7
 8001102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001106:	bf00      	nop
 8001108:	48000400 	.word	0x48000400

0800110c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001112:	2300      	movs	r3, #0
 8001114:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001116:	2003      	movs	r0, #3
 8001118:	f000 f95a 	bl	80013d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800111c:	2000      	movs	r0, #0
 800111e:	f000 f80d 	bl	800113c <HAL_InitTick>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d002      	beq.n	800112e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	71fb      	strb	r3, [r7, #7]
 800112c:	e001      	b.n	8001132 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800112e:	f7ff fbab 	bl	8000888 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001132:	79fb      	ldrb	r3, [r7, #7]

}
 8001134:	4618      	mov	r0, r3
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001144:	2300      	movs	r3, #0
 8001146:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001148:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <HAL_InitTick+0x68>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d022      	beq.n	8001196 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001150:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <HAL_InitTick+0x6c>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <HAL_InitTick+0x68>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800115c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001160:	fbb2 f3f3 	udiv	r3, r2, r3
 8001164:	4618      	mov	r0, r3
 8001166:	f000 f966 	bl	8001436 <HAL_SYSTICK_Config>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d10f      	bne.n	8001190 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b0f      	cmp	r3, #15
 8001174:	d809      	bhi.n	800118a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001176:	2200      	movs	r2, #0
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	f04f 30ff 	mov.w	r0, #4294967295
 800117e:	f000 f932 	bl	80013e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001182:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <HAL_InitTick+0x70>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6013      	str	r3, [r2, #0]
 8001188:	e007      	b.n	800119a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	73fb      	strb	r3, [r7, #15]
 800118e:	e004      	b.n	800119a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	73fb      	strb	r3, [r7, #15]
 8001194:	e001      	b.n	800119a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800119a:	7bfb      	ldrb	r3, [r7, #15]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000008 	.word	0x20000008
 80011a8:	20000000 	.word	0x20000000
 80011ac:	20000004 	.word	0x20000004

080011b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011b4:	4b05      	ldr	r3, [pc, #20]	; (80011cc <HAL_IncTick+0x1c>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <HAL_IncTick+0x20>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4413      	add	r3, r2
 80011be:	4a03      	ldr	r2, [pc, #12]	; (80011cc <HAL_IncTick+0x1c>)
 80011c0:	6013      	str	r3, [r2, #0]
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	20017c4c 	.word	0x20017c4c
 80011d0:	20000008 	.word	0x20000008

080011d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return uwTick;
 80011d8:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <HAL_GetTick+0x14>)
 80011da:	681b      	ldr	r3, [r3, #0]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20017c4c 	.word	0x20017c4c

080011ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011f4:	f7ff ffee 	bl	80011d4 <HAL_GetTick>
 80011f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001204:	d004      	beq.n	8001210 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <HAL_Delay+0x40>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	4413      	add	r3, r2
 800120e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001210:	bf00      	nop
 8001212:	f7ff ffdf 	bl	80011d4 <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	68fa      	ldr	r2, [r7, #12]
 800121e:	429a      	cmp	r2, r3
 8001220:	d8f7      	bhi.n	8001212 <HAL_Delay+0x26>
  {
  }
}
 8001222:	bf00      	nop
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000008 	.word	0x20000008

08001230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <__NVIC_SetPriorityGrouping+0x44>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800124c:	4013      	ands	r3, r2
 800124e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001258:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800125c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001262:	4a04      	ldr	r2, [pc, #16]	; (8001274 <__NVIC_SetPriorityGrouping+0x44>)
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	60d3      	str	r3, [r2, #12]
}
 8001268:	bf00      	nop
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800127c:	4b04      	ldr	r3, [pc, #16]	; (8001290 <__NVIC_GetPriorityGrouping+0x18>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	0a1b      	lsrs	r3, r3, #8
 8001282:	f003 0307 	and.w	r3, r3, #7
}
 8001286:	4618      	mov	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	db0b      	blt.n	80012be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	f003 021f 	and.w	r2, r3, #31
 80012ac:	4907      	ldr	r1, [pc, #28]	; (80012cc <__NVIC_EnableIRQ+0x38>)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	095b      	lsrs	r3, r3, #5
 80012b4:	2001      	movs	r0, #1
 80012b6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000e100 	.word	0xe000e100

080012d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	6039      	str	r1, [r7, #0]
 80012da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	db0a      	blt.n	80012fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	490c      	ldr	r1, [pc, #48]	; (800131c <__NVIC_SetPriority+0x4c>)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	0112      	lsls	r2, r2, #4
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	440b      	add	r3, r1
 80012f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f8:	e00a      	b.n	8001310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	4908      	ldr	r1, [pc, #32]	; (8001320 <__NVIC_SetPriority+0x50>)
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	3b04      	subs	r3, #4
 8001308:	0112      	lsls	r2, r2, #4
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	440b      	add	r3, r1
 800130e:	761a      	strb	r2, [r3, #24]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000e100 	.word	0xe000e100
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001324:	b480      	push	{r7}
 8001326:	b089      	sub	sp, #36	; 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f1c3 0307 	rsb	r3, r3, #7
 800133e:	2b04      	cmp	r3, #4
 8001340:	bf28      	it	cs
 8001342:	2304      	movcs	r3, #4
 8001344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3304      	adds	r3, #4
 800134a:	2b06      	cmp	r3, #6
 800134c:	d902      	bls.n	8001354 <NVIC_EncodePriority+0x30>
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3b03      	subs	r3, #3
 8001352:	e000      	b.n	8001356 <NVIC_EncodePriority+0x32>
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001358:	f04f 32ff 	mov.w	r2, #4294967295
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43da      	mvns	r2, r3
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	401a      	ands	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800136c:	f04f 31ff 	mov.w	r1, #4294967295
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	fa01 f303 	lsl.w	r3, r1, r3
 8001376:	43d9      	mvns	r1, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800137c:	4313      	orrs	r3, r2
         );
}
 800137e:	4618      	mov	r0, r3
 8001380:	3724      	adds	r7, #36	; 0x24
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
	...

0800138c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3b01      	subs	r3, #1
 8001398:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800139c:	d301      	bcc.n	80013a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800139e:	2301      	movs	r3, #1
 80013a0:	e00f      	b.n	80013c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a2:	4a0a      	ldr	r2, [pc, #40]	; (80013cc <SysTick_Config+0x40>)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013aa:	210f      	movs	r1, #15
 80013ac:	f04f 30ff 	mov.w	r0, #4294967295
 80013b0:	f7ff ff8e 	bl	80012d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <SysTick_Config+0x40>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ba:	4b04      	ldr	r3, [pc, #16]	; (80013cc <SysTick_Config+0x40>)
 80013bc:	2207      	movs	r2, #7
 80013be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	e000e010 	.word	0xe000e010

080013d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff ff29 	bl	8001230 <__NVIC_SetPriorityGrouping>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b086      	sub	sp, #24
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	4603      	mov	r3, r0
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
 80013f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013f4:	f7ff ff40 	bl	8001278 <__NVIC_GetPriorityGrouping>
 80013f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	68b9      	ldr	r1, [r7, #8]
 80013fe:	6978      	ldr	r0, [r7, #20]
 8001400:	f7ff ff90 	bl	8001324 <NVIC_EncodePriority>
 8001404:	4602      	mov	r2, r0
 8001406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800140a:	4611      	mov	r1, r2
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff5f 	bl	80012d0 <__NVIC_SetPriority>
}
 8001412:	bf00      	nop
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff33 	bl	8001294 <__NVIC_EnableIRQ>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff ffa4 	bl	800138c <SysTick_Config>
 8001444:	4603      	mov	r3, r0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001450:	b480      	push	{r7}
 8001452:	b087      	sub	sp, #28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800145e:	e15a      	b.n	8001716 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	2101      	movs	r1, #1
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	fa01 f303 	lsl.w	r3, r1, r3
 800146c:	4013      	ands	r3, r2
 800146e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 814c 	beq.w	8001710 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 0303 	and.w	r3, r3, #3
 8001480:	2b01      	cmp	r3, #1
 8001482:	d005      	beq.n	8001490 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800148c:	2b02      	cmp	r3, #2
 800148e:	d130      	bne.n	80014f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	2203      	movs	r2, #3
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4013      	ands	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	68da      	ldr	r2, [r3, #12]
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014c6:	2201      	movs	r2, #1
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	4013      	ands	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	091b      	lsrs	r3, r3, #4
 80014dc:	f003 0201 	and.w	r2, r3, #1
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d017      	beq.n	800152e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	2203      	movs	r2, #3
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	4013      	ands	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d123      	bne.n	8001582 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	08da      	lsrs	r2, r3, #3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3208      	adds	r2, #8
 8001542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001546:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	220f      	movs	r2, #15
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	691a      	ldr	r2, [r3, #16]
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4313      	orrs	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	08da      	lsrs	r2, r3, #3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3208      	adds	r2, #8
 800157c:	6939      	ldr	r1, [r7, #16]
 800157e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	2203      	movs	r2, #3
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4013      	ands	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 0203 	and.w	r2, r3, #3
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 80a6 	beq.w	8001710 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c4:	4b5b      	ldr	r3, [pc, #364]	; (8001734 <HAL_GPIO_Init+0x2e4>)
 80015c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015c8:	4a5a      	ldr	r2, [pc, #360]	; (8001734 <HAL_GPIO_Init+0x2e4>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	6613      	str	r3, [r2, #96]	; 0x60
 80015d0:	4b58      	ldr	r3, [pc, #352]	; (8001734 <HAL_GPIO_Init+0x2e4>)
 80015d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015dc:	4a56      	ldr	r2, [pc, #344]	; (8001738 <HAL_GPIO_Init+0x2e8>)
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	089b      	lsrs	r3, r3, #2
 80015e2:	3302      	adds	r3, #2
 80015e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	f003 0303 	and.w	r3, r3, #3
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	220f      	movs	r2, #15
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4013      	ands	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001606:	d01f      	beq.n	8001648 <HAL_GPIO_Init+0x1f8>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a4c      	ldr	r2, [pc, #304]	; (800173c <HAL_GPIO_Init+0x2ec>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d019      	beq.n	8001644 <HAL_GPIO_Init+0x1f4>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a4b      	ldr	r2, [pc, #300]	; (8001740 <HAL_GPIO_Init+0x2f0>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d013      	beq.n	8001640 <HAL_GPIO_Init+0x1f0>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a4a      	ldr	r2, [pc, #296]	; (8001744 <HAL_GPIO_Init+0x2f4>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d00d      	beq.n	800163c <HAL_GPIO_Init+0x1ec>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a49      	ldr	r2, [pc, #292]	; (8001748 <HAL_GPIO_Init+0x2f8>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d007      	beq.n	8001638 <HAL_GPIO_Init+0x1e8>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a48      	ldr	r2, [pc, #288]	; (800174c <HAL_GPIO_Init+0x2fc>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d101      	bne.n	8001634 <HAL_GPIO_Init+0x1e4>
 8001630:	2305      	movs	r3, #5
 8001632:	e00a      	b.n	800164a <HAL_GPIO_Init+0x1fa>
 8001634:	2306      	movs	r3, #6
 8001636:	e008      	b.n	800164a <HAL_GPIO_Init+0x1fa>
 8001638:	2304      	movs	r3, #4
 800163a:	e006      	b.n	800164a <HAL_GPIO_Init+0x1fa>
 800163c:	2303      	movs	r3, #3
 800163e:	e004      	b.n	800164a <HAL_GPIO_Init+0x1fa>
 8001640:	2302      	movs	r3, #2
 8001642:	e002      	b.n	800164a <HAL_GPIO_Init+0x1fa>
 8001644:	2301      	movs	r3, #1
 8001646:	e000      	b.n	800164a <HAL_GPIO_Init+0x1fa>
 8001648:	2300      	movs	r3, #0
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	f002 0203 	and.w	r2, r2, #3
 8001650:	0092      	lsls	r2, r2, #2
 8001652:	4093      	lsls	r3, r2
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4313      	orrs	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800165a:	4937      	ldr	r1, [pc, #220]	; (8001738 <HAL_GPIO_Init+0x2e8>)
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	089b      	lsrs	r3, r3, #2
 8001660:	3302      	adds	r3, #2
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001668:	4b39      	ldr	r3, [pc, #228]	; (8001750 <HAL_GPIO_Init+0x300>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	43db      	mvns	r3, r3
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	4013      	ands	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	4313      	orrs	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800168c:	4a30      	ldr	r2, [pc, #192]	; (8001750 <HAL_GPIO_Init+0x300>)
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001692:	4b2f      	ldr	r3, [pc, #188]	; (8001750 <HAL_GPIO_Init+0x300>)
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	43db      	mvns	r3, r3
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	4013      	ands	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016b6:	4a26      	ldr	r2, [pc, #152]	; (8001750 <HAL_GPIO_Init+0x300>)
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80016bc:	4b24      	ldr	r3, [pc, #144]	; (8001750 <HAL_GPIO_Init+0x300>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	43db      	mvns	r3, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	4313      	orrs	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016e0:	4a1b      	ldr	r2, [pc, #108]	; (8001750 <HAL_GPIO_Init+0x300>)
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80016e6:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <HAL_GPIO_Init+0x300>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	43db      	mvns	r3, r3
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	4013      	ands	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4313      	orrs	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800170a:	4a11      	ldr	r2, [pc, #68]	; (8001750 <HAL_GPIO_Init+0x300>)
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	3301      	adds	r3, #1
 8001714:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	fa22 f303 	lsr.w	r3, r2, r3
 8001720:	2b00      	cmp	r3, #0
 8001722:	f47f ae9d 	bne.w	8001460 <HAL_GPIO_Init+0x10>
  }
}
 8001726:	bf00      	nop
 8001728:	bf00      	nop
 800172a:	371c      	adds	r7, #28
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	40021000 	.word	0x40021000
 8001738:	40010000 	.word	0x40010000
 800173c:	48000400 	.word	0x48000400
 8001740:	48000800 	.word	0x48000800
 8001744:	48000c00 	.word	0x48000c00
 8001748:	48001000 	.word	0x48001000
 800174c:	48001400 	.word	0x48001400
 8001750:	40010400 	.word	0x40010400

08001754 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	691a      	ldr	r2, [r3, #16]
 8001764:	887b      	ldrh	r3, [r7, #2]
 8001766:	4013      	ands	r3, r2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d002      	beq.n	8001772 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800176c:	2301      	movs	r3, #1
 800176e:	73fb      	strb	r3, [r7, #15]
 8001770:	e001      	b.n	8001776 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001772:	2300      	movs	r3, #0
 8001774:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001776:	7bfb      	ldrb	r3, [r7, #15]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	460b      	mov	r3, r1
 800178e:	807b      	strh	r3, [r7, #2]
 8001790:	4613      	mov	r3, r2
 8001792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001794:	787b      	ldrb	r3, [r7, #1]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800179a:	887a      	ldrh	r2, [r7, #2]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017a0:	e002      	b.n	80017a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017a2:	887a      	ldrh	r2, [r7, #2]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017c0:	695a      	ldr	r2, [r3, #20]
 80017c2:	88fb      	ldrh	r3, [r7, #6]
 80017c4:	4013      	ands	r3, r2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d006      	beq.n	80017d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017ca:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017cc:	88fb      	ldrh	r3, [r7, #6]
 80017ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 f806 	bl	80017e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40010400 	.word	0x40010400

080017e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d141      	bne.n	800188e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800180a:	4b4b      	ldr	r3, [pc, #300]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001816:	d131      	bne.n	800187c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001818:	4b47      	ldr	r3, [pc, #284]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800181e:	4a46      	ldr	r2, [pc, #280]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001824:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001828:	4b43      	ldr	r3, [pc, #268]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001830:	4a41      	ldr	r2, [pc, #260]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001832:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001836:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001838:	4b40      	ldr	r3, [pc, #256]	; (800193c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2232      	movs	r2, #50	; 0x32
 800183e:	fb02 f303 	mul.w	r3, r2, r3
 8001842:	4a3f      	ldr	r2, [pc, #252]	; (8001940 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001844:	fba2 2303 	umull	r2, r3, r2, r3
 8001848:	0c9b      	lsrs	r3, r3, #18
 800184a:	3301      	adds	r3, #1
 800184c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800184e:	e002      	b.n	8001856 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	3b01      	subs	r3, #1
 8001854:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001856:	4b38      	ldr	r3, [pc, #224]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001862:	d102      	bne.n	800186a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f2      	bne.n	8001850 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800186a:	4b33      	ldr	r3, [pc, #204]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001876:	d158      	bne.n	800192a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e057      	b.n	800192c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800187c:	4b2e      	ldr	r3, [pc, #184]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800187e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001882:	4a2d      	ldr	r2, [pc, #180]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001888:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800188c:	e04d      	b.n	800192a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001894:	d141      	bne.n	800191a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001896:	4b28      	ldr	r3, [pc, #160]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800189e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018a2:	d131      	bne.n	8001908 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018a4:	4b24      	ldr	r3, [pc, #144]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018aa:	4a23      	ldr	r2, [pc, #140]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018b4:	4b20      	ldr	r3, [pc, #128]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018bc:	4a1e      	ldr	r2, [pc, #120]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018c4:	4b1d      	ldr	r3, [pc, #116]	; (800193c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2232      	movs	r2, #50	; 0x32
 80018ca:	fb02 f303 	mul.w	r3, r2, r3
 80018ce:	4a1c      	ldr	r2, [pc, #112]	; (8001940 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018d0:	fba2 2303 	umull	r2, r3, r2, r3
 80018d4:	0c9b      	lsrs	r3, r3, #18
 80018d6:	3301      	adds	r3, #1
 80018d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018da:	e002      	b.n	80018e2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	3b01      	subs	r3, #1
 80018e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018e2:	4b15      	ldr	r3, [pc, #84]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ee:	d102      	bne.n	80018f6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f2      	bne.n	80018dc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001902:	d112      	bne.n	800192a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e011      	b.n	800192c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001908:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001914:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001918:	e007      	b.n	800192a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800191a:	4b07      	ldr	r3, [pc, #28]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001922:	4a05      	ldr	r2, [pc, #20]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001924:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001928:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	40007000 	.word	0x40007000
 800193c:	20000000 	.word	0x20000000
 8001940:	431bde83 	.word	0x431bde83

08001944 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001948:	4b05      	ldr	r3, [pc, #20]	; (8001960 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	4a04      	ldr	r2, [pc, #16]	; (8001960 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800194e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001952:	6093      	str	r3, [r2, #8]
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40007000 	.word	0x40007000

08001964 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b088      	sub	sp, #32
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e306      	b.n	8001f84 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b00      	cmp	r3, #0
 8001980:	d075      	beq.n	8001a6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001982:	4b97      	ldr	r3, [pc, #604]	; (8001be0 <HAL_RCC_OscConfig+0x27c>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 030c 	and.w	r3, r3, #12
 800198a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800198c:	4b94      	ldr	r3, [pc, #592]	; (8001be0 <HAL_RCC_OscConfig+0x27c>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	2b0c      	cmp	r3, #12
 800199a:	d102      	bne.n	80019a2 <HAL_RCC_OscConfig+0x3e>
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	2b03      	cmp	r3, #3
 80019a0:	d002      	beq.n	80019a8 <HAL_RCC_OscConfig+0x44>
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d10b      	bne.n	80019c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a8:	4b8d      	ldr	r3, [pc, #564]	; (8001be0 <HAL_RCC_OscConfig+0x27c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d05b      	beq.n	8001a6c <HAL_RCC_OscConfig+0x108>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d157      	bne.n	8001a6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e2e1      	b.n	8001f84 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c8:	d106      	bne.n	80019d8 <HAL_RCC_OscConfig+0x74>
 80019ca:	4b85      	ldr	r3, [pc, #532]	; (8001be0 <HAL_RCC_OscConfig+0x27c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a84      	ldr	r2, [pc, #528]	; (8001be0 <HAL_RCC_OscConfig+0x27c>)
 80019d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	e01d      	b.n	8001a14 <HAL_RCC_OscConfig+0xb0>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019e0:	d10c      	bne.n	80019fc <HAL_RCC_OscConfig+0x98>
 80019e2:	4b7f      	ldr	r3, [pc, #508]	; (8001be0 <HAL_RCC_OscConfig+0x27c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a7e      	ldr	r2, [pc, #504]	; (8001be0 <HAL_RCC_OscConfig+0x27c>)
 80019e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ec:	6013      	str	r3, [r2, #0]
 80019ee:	4b7c      	ldr	r3, [pc, #496]	; (8001be0 <HAL_RCC_OscConfig+0x27c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a7b      	ldr	r2, [pc, #492]	; (8001be0 <HAL_RCC_OscConfig+0x27c>)
 80019f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	e00b      	b.n	8001a14 <HAL_RCC_OscConfig+0xb0>
 80019fc:	4b78      	ldr	r3, [pc, #480]	; (8001be0 <HAL_RCC_OscConfig+0x27c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a77      	ldr	r2, [pc, #476]	; (8001be0 <HAL_RCC_OscConfig+0x27c>)
 8001a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	4b75      	ldr	r3, [pc, #468]	; (8001be0 <HAL_RCC_OscConfig+0x27c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <HAL_RCC_OscConfig+0x27c>)
 8001a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d013      	beq.n	8001a44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1c:	f7ff fbda 	bl	80011d4 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a24:	f7ff fbd6 	bl	80011d4 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b64      	cmp	r3, #100	; 0x64
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e2a6      	b.n	8001f84 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a36:	4b6a      	ldr	r3, [pc, #424]	; (8001be0 <HAL_RCC_OscConfig+0x27c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0f0      	beq.n	8001a24 <HAL_RCC_OscConfig+0xc0>
 8001a42:	e014      	b.n	8001a6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a44:	f7ff fbc6 	bl	80011d4 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a4c:	f7ff fbc2 	bl	80011d4 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b64      	cmp	r3, #100	; 0x64
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e292      	b.n	8001f84 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a5e:	4b60      	ldr	r3, [pc, #384]	; (8001be0 <HAL_RCC_OscConfig+0x27c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1f0      	bne.n	8001a4c <HAL_RCC_OscConfig+0xe8>
 8001a6a:	e000      	b.n	8001a6e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d075      	beq.n	8001b66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a7a:	4b59      	ldr	r3, [pc, #356]	; (8001be0 <HAL_RCC_OscConfig+0x27c>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
 8001a82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a84:	4b56      	ldr	r3, [pc, #344]	; (8001be0 <HAL_RCC_OscConfig+0x27c>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	2b0c      	cmp	r3, #12
 8001a92:	d102      	bne.n	8001a9a <HAL_RCC_OscConfig+0x136>
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d002      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x13c>
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	2b04      	cmp	r3, #4
 8001a9e:	d11f      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aa0:	4b4f      	ldr	r3, [pc, #316]	; (8001be0 <HAL_RCC_OscConfig+0x27c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d005      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x154>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e265      	b.n	8001f84 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab8:	4b49      	ldr	r3, [pc, #292]	; (8001be0 <HAL_RCC_OscConfig+0x27c>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	061b      	lsls	r3, r3, #24
 8001ac6:	4946      	ldr	r1, [pc, #280]	; (8001be0 <HAL_RCC_OscConfig+0x27c>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001acc:	4b45      	ldr	r3, [pc, #276]	; (8001be4 <HAL_RCC_OscConfig+0x280>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff fb33 	bl	800113c <HAL_InitTick>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d043      	beq.n	8001b64 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e251      	b.n	8001f84 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d023      	beq.n	8001b30 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ae8:	4b3d      	ldr	r3, [pc, #244]	; (8001be0 <HAL_RCC_OscConfig+0x27c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a3c      	ldr	r2, [pc, #240]	; (8001be0 <HAL_RCC_OscConfig+0x27c>)
 8001aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af4:	f7ff fb6e 	bl	80011d4 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001afc:	f7ff fb6a 	bl	80011d4 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e23a      	b.n	8001f84 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b0e:	4b34      	ldr	r3, [pc, #208]	; (8001be0 <HAL_RCC_OscConfig+0x27c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1a:	4b31      	ldr	r3, [pc, #196]	; (8001be0 <HAL_RCC_OscConfig+0x27c>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	061b      	lsls	r3, r3, #24
 8001b28:	492d      	ldr	r1, [pc, #180]	; (8001be0 <HAL_RCC_OscConfig+0x27c>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	604b      	str	r3, [r1, #4]
 8001b2e:	e01a      	b.n	8001b66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b30:	4b2b      	ldr	r3, [pc, #172]	; (8001be0 <HAL_RCC_OscConfig+0x27c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a2a      	ldr	r2, [pc, #168]	; (8001be0 <HAL_RCC_OscConfig+0x27c>)
 8001b36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3c:	f7ff fb4a 	bl	80011d4 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b44:	f7ff fb46 	bl	80011d4 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e216      	b.n	8001f84 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b56:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <HAL_RCC_OscConfig+0x27c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f0      	bne.n	8001b44 <HAL_RCC_OscConfig+0x1e0>
 8001b62:	e000      	b.n	8001b66 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b64:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d041      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d01c      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b7a:	4b19      	ldr	r3, [pc, #100]	; (8001be0 <HAL_RCC_OscConfig+0x27c>)
 8001b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b80:	4a17      	ldr	r2, [pc, #92]	; (8001be0 <HAL_RCC_OscConfig+0x27c>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8a:	f7ff fb23 	bl	80011d4 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b92:	f7ff fb1f 	bl	80011d4 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e1ef      	b.n	8001f84 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ba4:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <HAL_RCC_OscConfig+0x27c>)
 8001ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0ef      	beq.n	8001b92 <HAL_RCC_OscConfig+0x22e>
 8001bb2:	e020      	b.n	8001bf6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bb4:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <HAL_RCC_OscConfig+0x27c>)
 8001bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bba:	4a09      	ldr	r2, [pc, #36]	; (8001be0 <HAL_RCC_OscConfig+0x27c>)
 8001bbc:	f023 0301 	bic.w	r3, r3, #1
 8001bc0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc4:	f7ff fb06 	bl	80011d4 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bca:	e00d      	b.n	8001be8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bcc:	f7ff fb02 	bl	80011d4 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d906      	bls.n	8001be8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e1d2      	b.n	8001f84 <HAL_RCC_OscConfig+0x620>
 8001bde:	bf00      	nop
 8001be0:	40021000 	.word	0x40021000
 8001be4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001be8:	4b8c      	ldr	r3, [pc, #560]	; (8001e1c <HAL_RCC_OscConfig+0x4b8>)
 8001bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1ea      	bne.n	8001bcc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 80a6 	beq.w	8001d50 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c04:	2300      	movs	r3, #0
 8001c06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c08:	4b84      	ldr	r3, [pc, #528]	; (8001e1c <HAL_RCC_OscConfig+0x4b8>)
 8001c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_RCC_OscConfig+0x2b4>
 8001c14:	2301      	movs	r3, #1
 8001c16:	e000      	b.n	8001c1a <HAL_RCC_OscConfig+0x2b6>
 8001c18:	2300      	movs	r3, #0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00d      	beq.n	8001c3a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c1e:	4b7f      	ldr	r3, [pc, #508]	; (8001e1c <HAL_RCC_OscConfig+0x4b8>)
 8001c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c22:	4a7e      	ldr	r2, [pc, #504]	; (8001e1c <HAL_RCC_OscConfig+0x4b8>)
 8001c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c28:	6593      	str	r3, [r2, #88]	; 0x58
 8001c2a:	4b7c      	ldr	r3, [pc, #496]	; (8001e1c <HAL_RCC_OscConfig+0x4b8>)
 8001c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c36:	2301      	movs	r3, #1
 8001c38:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c3a:	4b79      	ldr	r3, [pc, #484]	; (8001e20 <HAL_RCC_OscConfig+0x4bc>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d118      	bne.n	8001c78 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c46:	4b76      	ldr	r3, [pc, #472]	; (8001e20 <HAL_RCC_OscConfig+0x4bc>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a75      	ldr	r2, [pc, #468]	; (8001e20 <HAL_RCC_OscConfig+0x4bc>)
 8001c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c52:	f7ff fabf 	bl	80011d4 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c5a:	f7ff fabb 	bl	80011d4 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e18b      	b.n	8001f84 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c6c:	4b6c      	ldr	r3, [pc, #432]	; (8001e20 <HAL_RCC_OscConfig+0x4bc>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0f0      	beq.n	8001c5a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d108      	bne.n	8001c92 <HAL_RCC_OscConfig+0x32e>
 8001c80:	4b66      	ldr	r3, [pc, #408]	; (8001e1c <HAL_RCC_OscConfig+0x4b8>)
 8001c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c86:	4a65      	ldr	r2, [pc, #404]	; (8001e1c <HAL_RCC_OscConfig+0x4b8>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c90:	e024      	b.n	8001cdc <HAL_RCC_OscConfig+0x378>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	2b05      	cmp	r3, #5
 8001c98:	d110      	bne.n	8001cbc <HAL_RCC_OscConfig+0x358>
 8001c9a:	4b60      	ldr	r3, [pc, #384]	; (8001e1c <HAL_RCC_OscConfig+0x4b8>)
 8001c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca0:	4a5e      	ldr	r2, [pc, #376]	; (8001e1c <HAL_RCC_OscConfig+0x4b8>)
 8001ca2:	f043 0304 	orr.w	r3, r3, #4
 8001ca6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001caa:	4b5c      	ldr	r3, [pc, #368]	; (8001e1c <HAL_RCC_OscConfig+0x4b8>)
 8001cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb0:	4a5a      	ldr	r2, [pc, #360]	; (8001e1c <HAL_RCC_OscConfig+0x4b8>)
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cba:	e00f      	b.n	8001cdc <HAL_RCC_OscConfig+0x378>
 8001cbc:	4b57      	ldr	r3, [pc, #348]	; (8001e1c <HAL_RCC_OscConfig+0x4b8>)
 8001cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc2:	4a56      	ldr	r2, [pc, #344]	; (8001e1c <HAL_RCC_OscConfig+0x4b8>)
 8001cc4:	f023 0301 	bic.w	r3, r3, #1
 8001cc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ccc:	4b53      	ldr	r3, [pc, #332]	; (8001e1c <HAL_RCC_OscConfig+0x4b8>)
 8001cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd2:	4a52      	ldr	r2, [pc, #328]	; (8001e1c <HAL_RCC_OscConfig+0x4b8>)
 8001cd4:	f023 0304 	bic.w	r3, r3, #4
 8001cd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d016      	beq.n	8001d12 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce4:	f7ff fa76 	bl	80011d4 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cea:	e00a      	b.n	8001d02 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cec:	f7ff fa72 	bl	80011d4 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e140      	b.n	8001f84 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d02:	4b46      	ldr	r3, [pc, #280]	; (8001e1c <HAL_RCC_OscConfig+0x4b8>)
 8001d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0ed      	beq.n	8001cec <HAL_RCC_OscConfig+0x388>
 8001d10:	e015      	b.n	8001d3e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d12:	f7ff fa5f 	bl	80011d4 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d18:	e00a      	b.n	8001d30 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1a:	f7ff fa5b 	bl	80011d4 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e129      	b.n	8001f84 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d30:	4b3a      	ldr	r3, [pc, #232]	; (8001e1c <HAL_RCC_OscConfig+0x4b8>)
 8001d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1ed      	bne.n	8001d1a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d3e:	7ffb      	ldrb	r3, [r7, #31]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d105      	bne.n	8001d50 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d44:	4b35      	ldr	r3, [pc, #212]	; (8001e1c <HAL_RCC_OscConfig+0x4b8>)
 8001d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d48:	4a34      	ldr	r2, [pc, #208]	; (8001e1c <HAL_RCC_OscConfig+0x4b8>)
 8001d4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0320 	and.w	r3, r3, #32
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d03c      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d01c      	beq.n	8001d9e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d64:	4b2d      	ldr	r3, [pc, #180]	; (8001e1c <HAL_RCC_OscConfig+0x4b8>)
 8001d66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d6a:	4a2c      	ldr	r2, [pc, #176]	; (8001e1c <HAL_RCC_OscConfig+0x4b8>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d74:	f7ff fa2e 	bl	80011d4 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d7c:	f7ff fa2a 	bl	80011d4 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e0fa      	b.n	8001f84 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d8e:	4b23      	ldr	r3, [pc, #140]	; (8001e1c <HAL_RCC_OscConfig+0x4b8>)
 8001d90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0ef      	beq.n	8001d7c <HAL_RCC_OscConfig+0x418>
 8001d9c:	e01b      	b.n	8001dd6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d9e:	4b1f      	ldr	r3, [pc, #124]	; (8001e1c <HAL_RCC_OscConfig+0x4b8>)
 8001da0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001da4:	4a1d      	ldr	r2, [pc, #116]	; (8001e1c <HAL_RCC_OscConfig+0x4b8>)
 8001da6:	f023 0301 	bic.w	r3, r3, #1
 8001daa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dae:	f7ff fa11 	bl	80011d4 <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001db6:	f7ff fa0d 	bl	80011d4 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e0dd      	b.n	8001f84 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001dc8:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <HAL_RCC_OscConfig+0x4b8>)
 8001dca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1ef      	bne.n	8001db6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 80d1 	beq.w	8001f82 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001de0:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <HAL_RCC_OscConfig+0x4b8>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 030c 	and.w	r3, r3, #12
 8001de8:	2b0c      	cmp	r3, #12
 8001dea:	f000 808b 	beq.w	8001f04 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d15e      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <HAL_RCC_OscConfig+0x4b8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a08      	ldr	r2, [pc, #32]	; (8001e1c <HAL_RCC_OscConfig+0x4b8>)
 8001dfc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e02:	f7ff f9e7 	bl	80011d4 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e08:	e00c      	b.n	8001e24 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0a:	f7ff f9e3 	bl	80011d4 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d905      	bls.n	8001e24 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e0b3      	b.n	8001f84 <HAL_RCC_OscConfig+0x620>
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e24:	4b59      	ldr	r3, [pc, #356]	; (8001f8c <HAL_RCC_OscConfig+0x628>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1ec      	bne.n	8001e0a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e30:	4b56      	ldr	r3, [pc, #344]	; (8001f8c <HAL_RCC_OscConfig+0x628>)
 8001e32:	68da      	ldr	r2, [r3, #12]
 8001e34:	4b56      	ldr	r3, [pc, #344]	; (8001f90 <HAL_RCC_OscConfig+0x62c>)
 8001e36:	4013      	ands	r3, r2
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6a11      	ldr	r1, [r2, #32]
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e40:	3a01      	subs	r2, #1
 8001e42:	0112      	lsls	r2, r2, #4
 8001e44:	4311      	orrs	r1, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001e4a:	0212      	lsls	r2, r2, #8
 8001e4c:	4311      	orrs	r1, r2
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e52:	0852      	lsrs	r2, r2, #1
 8001e54:	3a01      	subs	r2, #1
 8001e56:	0552      	lsls	r2, r2, #21
 8001e58:	4311      	orrs	r1, r2
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e5e:	0852      	lsrs	r2, r2, #1
 8001e60:	3a01      	subs	r2, #1
 8001e62:	0652      	lsls	r2, r2, #25
 8001e64:	4311      	orrs	r1, r2
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e6a:	06d2      	lsls	r2, r2, #27
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	4947      	ldr	r1, [pc, #284]	; (8001f8c <HAL_RCC_OscConfig+0x628>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e74:	4b45      	ldr	r3, [pc, #276]	; (8001f8c <HAL_RCC_OscConfig+0x628>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a44      	ldr	r2, [pc, #272]	; (8001f8c <HAL_RCC_OscConfig+0x628>)
 8001e7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e7e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e80:	4b42      	ldr	r3, [pc, #264]	; (8001f8c <HAL_RCC_OscConfig+0x628>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	4a41      	ldr	r2, [pc, #260]	; (8001f8c <HAL_RCC_OscConfig+0x628>)
 8001e86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e8a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8c:	f7ff f9a2 	bl	80011d4 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e94:	f7ff f99e 	bl	80011d4 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e06e      	b.n	8001f84 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea6:	4b39      	ldr	r3, [pc, #228]	; (8001f8c <HAL_RCC_OscConfig+0x628>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCC_OscConfig+0x530>
 8001eb2:	e066      	b.n	8001f82 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb4:	4b35      	ldr	r3, [pc, #212]	; (8001f8c <HAL_RCC_OscConfig+0x628>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a34      	ldr	r2, [pc, #208]	; (8001f8c <HAL_RCC_OscConfig+0x628>)
 8001eba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ebe:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ec0:	4b32      	ldr	r3, [pc, #200]	; (8001f8c <HAL_RCC_OscConfig+0x628>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	4a31      	ldr	r2, [pc, #196]	; (8001f8c <HAL_RCC_OscConfig+0x628>)
 8001ec6:	f023 0303 	bic.w	r3, r3, #3
 8001eca:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001ecc:	4b2f      	ldr	r3, [pc, #188]	; (8001f8c <HAL_RCC_OscConfig+0x628>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	4a2e      	ldr	r2, [pc, #184]	; (8001f8c <HAL_RCC_OscConfig+0x628>)
 8001ed2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eda:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001edc:	f7ff f97a 	bl	80011d4 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee4:	f7ff f976 	bl	80011d4 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e046      	b.n	8001f84 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ef6:	4b25      	ldr	r3, [pc, #148]	; (8001f8c <HAL_RCC_OscConfig+0x628>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x580>
 8001f02:	e03e      	b.n	8001f82 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e039      	b.n	8001f84 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001f10:	4b1e      	ldr	r3, [pc, #120]	; (8001f8c <HAL_RCC_OscConfig+0x628>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f003 0203 	and.w	r2, r3, #3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d12c      	bne.n	8001f7e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d123      	bne.n	8001f7e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f40:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d11b      	bne.n	8001f7e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f50:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d113      	bne.n	8001f7e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f60:	085b      	lsrs	r3, r3, #1
 8001f62:	3b01      	subs	r3, #1
 8001f64:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d109      	bne.n	8001f7e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f74:	085b      	lsrs	r3, r3, #1
 8001f76:	3b01      	subs	r3, #1
 8001f78:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d001      	beq.n	8001f82 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e000      	b.n	8001f84 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3720      	adds	r7, #32
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	019f800c 	.word	0x019f800c

08001f94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e11e      	b.n	80021ea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fac:	4b91      	ldr	r3, [pc, #580]	; (80021f4 <HAL_RCC_ClockConfig+0x260>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 030f 	and.w	r3, r3, #15
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d910      	bls.n	8001fdc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fba:	4b8e      	ldr	r3, [pc, #568]	; (80021f4 <HAL_RCC_ClockConfig+0x260>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f023 020f 	bic.w	r2, r3, #15
 8001fc2:	498c      	ldr	r1, [pc, #560]	; (80021f4 <HAL_RCC_ClockConfig+0x260>)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fca:	4b8a      	ldr	r3, [pc, #552]	; (80021f4 <HAL_RCC_ClockConfig+0x260>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d001      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e106      	b.n	80021ea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d073      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b03      	cmp	r3, #3
 8001fee:	d129      	bne.n	8002044 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ff0:	4b81      	ldr	r3, [pc, #516]	; (80021f8 <HAL_RCC_ClockConfig+0x264>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e0f4      	b.n	80021ea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002000:	f000 f99e 	bl	8002340 <RCC_GetSysClockFreqFromPLLSource>
 8002004:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	4a7c      	ldr	r2, [pc, #496]	; (80021fc <HAL_RCC_ClockConfig+0x268>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d93f      	bls.n	800208e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800200e:	4b7a      	ldr	r3, [pc, #488]	; (80021f8 <HAL_RCC_ClockConfig+0x264>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d009      	beq.n	800202e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002022:	2b00      	cmp	r3, #0
 8002024:	d033      	beq.n	800208e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800202a:	2b00      	cmp	r3, #0
 800202c:	d12f      	bne.n	800208e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800202e:	4b72      	ldr	r3, [pc, #456]	; (80021f8 <HAL_RCC_ClockConfig+0x264>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002036:	4a70      	ldr	r2, [pc, #448]	; (80021f8 <HAL_RCC_ClockConfig+0x264>)
 8002038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800203c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800203e:	2380      	movs	r3, #128	; 0x80
 8002040:	617b      	str	r3, [r7, #20]
 8002042:	e024      	b.n	800208e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2b02      	cmp	r3, #2
 800204a:	d107      	bne.n	800205c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800204c:	4b6a      	ldr	r3, [pc, #424]	; (80021f8 <HAL_RCC_ClockConfig+0x264>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d109      	bne.n	800206c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e0c6      	b.n	80021ea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800205c:	4b66      	ldr	r3, [pc, #408]	; (80021f8 <HAL_RCC_ClockConfig+0x264>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e0be      	b.n	80021ea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800206c:	f000 f8ce 	bl	800220c <HAL_RCC_GetSysClockFreq>
 8002070:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	4a61      	ldr	r2, [pc, #388]	; (80021fc <HAL_RCC_ClockConfig+0x268>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d909      	bls.n	800208e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800207a:	4b5f      	ldr	r3, [pc, #380]	; (80021f8 <HAL_RCC_ClockConfig+0x264>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002082:	4a5d      	ldr	r2, [pc, #372]	; (80021f8 <HAL_RCC_ClockConfig+0x264>)
 8002084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002088:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800208a:	2380      	movs	r3, #128	; 0x80
 800208c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800208e:	4b5a      	ldr	r3, [pc, #360]	; (80021f8 <HAL_RCC_ClockConfig+0x264>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f023 0203 	bic.w	r2, r3, #3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	4957      	ldr	r1, [pc, #348]	; (80021f8 <HAL_RCC_ClockConfig+0x264>)
 800209c:	4313      	orrs	r3, r2
 800209e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020a0:	f7ff f898 	bl	80011d4 <HAL_GetTick>
 80020a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	e00a      	b.n	80020be <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a8:	f7ff f894 	bl	80011d4 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e095      	b.n	80021ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020be:	4b4e      	ldr	r3, [pc, #312]	; (80021f8 <HAL_RCC_ClockConfig+0x264>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 020c 	and.w	r2, r3, #12
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d1eb      	bne.n	80020a8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d023      	beq.n	8002124 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d005      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020e8:	4b43      	ldr	r3, [pc, #268]	; (80021f8 <HAL_RCC_ClockConfig+0x264>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	4a42      	ldr	r2, [pc, #264]	; (80021f8 <HAL_RCC_ClockConfig+0x264>)
 80020ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020f2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d007      	beq.n	8002110 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002100:	4b3d      	ldr	r3, [pc, #244]	; (80021f8 <HAL_RCC_ClockConfig+0x264>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002108:	4a3b      	ldr	r2, [pc, #236]	; (80021f8 <HAL_RCC_ClockConfig+0x264>)
 800210a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800210e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002110:	4b39      	ldr	r3, [pc, #228]	; (80021f8 <HAL_RCC_ClockConfig+0x264>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	4936      	ldr	r1, [pc, #216]	; (80021f8 <HAL_RCC_ClockConfig+0x264>)
 800211e:	4313      	orrs	r3, r2
 8002120:	608b      	str	r3, [r1, #8]
 8002122:	e008      	b.n	8002136 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	2b80      	cmp	r3, #128	; 0x80
 8002128:	d105      	bne.n	8002136 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800212a:	4b33      	ldr	r3, [pc, #204]	; (80021f8 <HAL_RCC_ClockConfig+0x264>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	4a32      	ldr	r2, [pc, #200]	; (80021f8 <HAL_RCC_ClockConfig+0x264>)
 8002130:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002134:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002136:	4b2f      	ldr	r3, [pc, #188]	; (80021f4 <HAL_RCC_ClockConfig+0x260>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	429a      	cmp	r2, r3
 8002142:	d21d      	bcs.n	8002180 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002144:	4b2b      	ldr	r3, [pc, #172]	; (80021f4 <HAL_RCC_ClockConfig+0x260>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f023 020f 	bic.w	r2, r3, #15
 800214c:	4929      	ldr	r1, [pc, #164]	; (80021f4 <HAL_RCC_ClockConfig+0x260>)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	4313      	orrs	r3, r2
 8002152:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002154:	f7ff f83e 	bl	80011d4 <HAL_GetTick>
 8002158:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215a:	e00a      	b.n	8002172 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800215c:	f7ff f83a 	bl	80011d4 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	f241 3288 	movw	r2, #5000	; 0x1388
 800216a:	4293      	cmp	r3, r2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e03b      	b.n	80021ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002172:	4b20      	ldr	r3, [pc, #128]	; (80021f4 <HAL_RCC_ClockConfig+0x260>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	d1ed      	bne.n	800215c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d008      	beq.n	800219e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800218c:	4b1a      	ldr	r3, [pc, #104]	; (80021f8 <HAL_RCC_ClockConfig+0x264>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	4917      	ldr	r1, [pc, #92]	; (80021f8 <HAL_RCC_ClockConfig+0x264>)
 800219a:	4313      	orrs	r3, r2
 800219c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d009      	beq.n	80021be <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021aa:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <HAL_RCC_ClockConfig+0x264>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	490f      	ldr	r1, [pc, #60]	; (80021f8 <HAL_RCC_ClockConfig+0x264>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021be:	f000 f825 	bl	800220c <HAL_RCC_GetSysClockFreq>
 80021c2:	4602      	mov	r2, r0
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <HAL_RCC_ClockConfig+0x264>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	091b      	lsrs	r3, r3, #4
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	490c      	ldr	r1, [pc, #48]	; (8002200 <HAL_RCC_ClockConfig+0x26c>)
 80021d0:	5ccb      	ldrb	r3, [r1, r3]
 80021d2:	f003 031f 	and.w	r3, r3, #31
 80021d6:	fa22 f303 	lsr.w	r3, r2, r3
 80021da:	4a0a      	ldr	r2, [pc, #40]	; (8002204 <HAL_RCC_ClockConfig+0x270>)
 80021dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021de:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <HAL_RCC_ClockConfig+0x274>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe ffaa 	bl	800113c <HAL_InitTick>
 80021e8:	4603      	mov	r3, r0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40022000 	.word	0x40022000
 80021f8:	40021000 	.word	0x40021000
 80021fc:	04c4b400 	.word	0x04c4b400
 8002200:	08004000 	.word	0x08004000
 8002204:	20000000 	.word	0x20000000
 8002208:	20000004 	.word	0x20000004

0800220c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800220c:	b480      	push	{r7}
 800220e:	b087      	sub	sp, #28
 8002210:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002212:	4b2c      	ldr	r3, [pc, #176]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 030c 	and.w	r3, r3, #12
 800221a:	2b04      	cmp	r3, #4
 800221c:	d102      	bne.n	8002224 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800221e:	4b2a      	ldr	r3, [pc, #168]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	e047      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002224:	4b27      	ldr	r3, [pc, #156]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f003 030c 	and.w	r3, r3, #12
 800222c:	2b08      	cmp	r3, #8
 800222e:	d102      	bne.n	8002236 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002230:	4b26      	ldr	r3, [pc, #152]	; (80022cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	e03e      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002236:	4b23      	ldr	r3, [pc, #140]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 030c 	and.w	r3, r3, #12
 800223e:	2b0c      	cmp	r3, #12
 8002240:	d136      	bne.n	80022b0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002242:	4b20      	ldr	r3, [pc, #128]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800224c:	4b1d      	ldr	r3, [pc, #116]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	3301      	adds	r3, #1
 8002258:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2b03      	cmp	r3, #3
 800225e:	d10c      	bne.n	800227a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002260:	4a1a      	ldr	r2, [pc, #104]	; (80022cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	fbb2 f3f3 	udiv	r3, r2, r3
 8002268:	4a16      	ldr	r2, [pc, #88]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800226a:	68d2      	ldr	r2, [r2, #12]
 800226c:	0a12      	lsrs	r2, r2, #8
 800226e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002272:	fb02 f303 	mul.w	r3, r2, r3
 8002276:	617b      	str	r3, [r7, #20]
      break;
 8002278:	e00c      	b.n	8002294 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800227a:	4a13      	ldr	r2, [pc, #76]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002282:	4a10      	ldr	r2, [pc, #64]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002284:	68d2      	ldr	r2, [r2, #12]
 8002286:	0a12      	lsrs	r2, r2, #8
 8002288:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800228c:	fb02 f303 	mul.w	r3, r2, r3
 8002290:	617b      	str	r3, [r7, #20]
      break;
 8002292:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002294:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	0e5b      	lsrs	r3, r3, #25
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	3301      	adds	r3, #1
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ac:	613b      	str	r3, [r7, #16]
 80022ae:	e001      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80022b4:	693b      	ldr	r3, [r7, #16]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	371c      	adds	r7, #28
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40021000 	.word	0x40021000
 80022c8:	00f42400 	.word	0x00f42400
 80022cc:	016e3600 	.word	0x016e3600

080022d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022d4:	4b03      	ldr	r3, [pc, #12]	; (80022e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80022d6:	681b      	ldr	r3, [r3, #0]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	20000000 	.word	0x20000000

080022e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022ec:	f7ff fff0 	bl	80022d0 <HAL_RCC_GetHCLKFreq>
 80022f0:	4602      	mov	r2, r0
 80022f2:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_RCC_GetPCLK1Freq+0x24>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	0a1b      	lsrs	r3, r3, #8
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	4904      	ldr	r1, [pc, #16]	; (8002310 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022fe:	5ccb      	ldrb	r3, [r1, r3]
 8002300:	f003 031f 	and.w	r3, r3, #31
 8002304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002308:	4618      	mov	r0, r3
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40021000 	.word	0x40021000
 8002310:	08004010 	.word	0x08004010

08002314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002318:	f7ff ffda 	bl	80022d0 <HAL_RCC_GetHCLKFreq>
 800231c:	4602      	mov	r2, r0
 800231e:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	0adb      	lsrs	r3, r3, #11
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	4904      	ldr	r1, [pc, #16]	; (800233c <HAL_RCC_GetPCLK2Freq+0x28>)
 800232a:	5ccb      	ldrb	r3, [r1, r3]
 800232c:	f003 031f 	and.w	r3, r3, #31
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002334:	4618      	mov	r0, r3
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40021000 	.word	0x40021000
 800233c:	08004010 	.word	0x08004010

08002340 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002340:	b480      	push	{r7}
 8002342:	b087      	sub	sp, #28
 8002344:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002346:	4b1e      	ldr	r3, [pc, #120]	; (80023c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002350:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	091b      	lsrs	r3, r3, #4
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	3301      	adds	r3, #1
 800235c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	2b03      	cmp	r3, #3
 8002362:	d10c      	bne.n	800237e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002364:	4a17      	ldr	r2, [pc, #92]	; (80023c4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	fbb2 f3f3 	udiv	r3, r2, r3
 800236c:	4a14      	ldr	r2, [pc, #80]	; (80023c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800236e:	68d2      	ldr	r2, [r2, #12]
 8002370:	0a12      	lsrs	r2, r2, #8
 8002372:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002376:	fb02 f303 	mul.w	r3, r2, r3
 800237a:	617b      	str	r3, [r7, #20]
    break;
 800237c:	e00c      	b.n	8002398 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800237e:	4a12      	ldr	r2, [pc, #72]	; (80023c8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	fbb2 f3f3 	udiv	r3, r2, r3
 8002386:	4a0e      	ldr	r2, [pc, #56]	; (80023c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002388:	68d2      	ldr	r2, [r2, #12]
 800238a:	0a12      	lsrs	r2, r2, #8
 800238c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002390:	fb02 f303 	mul.w	r3, r2, r3
 8002394:	617b      	str	r3, [r7, #20]
    break;
 8002396:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002398:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	0e5b      	lsrs	r3, r3, #25
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	3301      	adds	r3, #1
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80023b2:	687b      	ldr	r3, [r7, #4]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	371c      	adds	r7, #28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	40021000 	.word	0x40021000
 80023c4:	016e3600 	.word	0x016e3600
 80023c8:	00f42400 	.word	0x00f42400

080023cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023d4:	2300      	movs	r3, #0
 80023d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023d8:	2300      	movs	r3, #0
 80023da:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 8098 	beq.w	800251a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ea:	2300      	movs	r3, #0
 80023ec:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ee:	4b43      	ldr	r3, [pc, #268]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10d      	bne.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023fa:	4b40      	ldr	r3, [pc, #256]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fe:	4a3f      	ldr	r2, [pc, #252]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002404:	6593      	str	r3, [r2, #88]	; 0x58
 8002406:	4b3d      	ldr	r3, [pc, #244]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240e:	60bb      	str	r3, [r7, #8]
 8002410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002412:	2301      	movs	r3, #1
 8002414:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002416:	4b3a      	ldr	r3, [pc, #232]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a39      	ldr	r2, [pc, #228]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800241c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002420:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002422:	f7fe fed7 	bl	80011d4 <HAL_GetTick>
 8002426:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002428:	e009      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800242a:	f7fe fed3 	bl	80011d4 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d902      	bls.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	74fb      	strb	r3, [r7, #19]
        break;
 800243c:	e005      	b.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800243e:	4b30      	ldr	r3, [pc, #192]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0ef      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800244a:	7cfb      	ldrb	r3, [r7, #19]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d159      	bne.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002450:	4b2a      	ldr	r3, [pc, #168]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800245a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d01e      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	429a      	cmp	r2, r3
 800246a:	d019      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800246c:	4b23      	ldr	r3, [pc, #140]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800246e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002476:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002478:	4b20      	ldr	r3, [pc, #128]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800247a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247e:	4a1f      	ldr	r2, [pc, #124]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002488:	4b1c      	ldr	r3, [pc, #112]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800248a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248e:	4a1b      	ldr	r2, [pc, #108]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002494:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002498:	4a18      	ldr	r2, [pc, #96]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d016      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024aa:	f7fe fe93 	bl	80011d4 <HAL_GetTick>
 80024ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b0:	e00b      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b2:	f7fe fe8f 	bl	80011d4 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d902      	bls.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	74fb      	strb	r3, [r7, #19]
            break;
 80024c8:	e006      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ca:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0ec      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80024d8:	7cfb      	ldrb	r3, [r7, #19]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10b      	bne.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024de:	4b07      	ldr	r3, [pc, #28]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ec:	4903      	ldr	r1, [pc, #12]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024f4:	e008      	b.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024f6:	7cfb      	ldrb	r3, [r7, #19]
 80024f8:	74bb      	strb	r3, [r7, #18]
 80024fa:	e005      	b.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80024fc:	40021000 	.word	0x40021000
 8002500:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002504:	7cfb      	ldrb	r3, [r7, #19]
 8002506:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002508:	7c7b      	ldrb	r3, [r7, #17]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d105      	bne.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800250e:	4ba7      	ldr	r3, [pc, #668]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002512:	4aa6      	ldr	r2, [pc, #664]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002514:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002518:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00a      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002526:	4ba1      	ldr	r3, [pc, #644]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252c:	f023 0203 	bic.w	r2, r3, #3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	499d      	ldr	r1, [pc, #628]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002536:	4313      	orrs	r3, r2
 8002538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00a      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002548:	4b98      	ldr	r3, [pc, #608]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800254a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254e:	f023 020c 	bic.w	r2, r3, #12
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	4995      	ldr	r1, [pc, #596]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002558:	4313      	orrs	r3, r2
 800255a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00a      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800256a:	4b90      	ldr	r3, [pc, #576]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800256c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002570:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	498c      	ldr	r1, [pc, #560]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800257a:	4313      	orrs	r3, r2
 800257c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0308 	and.w	r3, r3, #8
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00a      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800258c:	4b87      	ldr	r3, [pc, #540]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800258e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002592:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	4984      	ldr	r1, [pc, #528]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800259c:	4313      	orrs	r3, r2
 800259e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0310 	and.w	r3, r3, #16
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00a      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025ae:	4b7f      	ldr	r3, [pc, #508]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	497b      	ldr	r1, [pc, #492]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0320 	and.w	r3, r3, #32
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00a      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025d0:	4b76      	ldr	r3, [pc, #472]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	4973      	ldr	r1, [pc, #460]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00a      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025f2:	4b6e      	ldr	r3, [pc, #440]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	496a      	ldr	r1, [pc, #424]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002602:	4313      	orrs	r3, r2
 8002604:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00a      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002614:	4b65      	ldr	r3, [pc, #404]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	4962      	ldr	r1, [pc, #392]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002624:	4313      	orrs	r3, r2
 8002626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00a      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002636:	4b5d      	ldr	r3, [pc, #372]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	4959      	ldr	r1, [pc, #356]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002646:	4313      	orrs	r3, r2
 8002648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00a      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002658:	4b54      	ldr	r3, [pc, #336]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800265a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800265e:	f023 0203 	bic.w	r2, r3, #3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002666:	4951      	ldr	r1, [pc, #324]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800267a:	4b4c      	ldr	r3, [pc, #304]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800267c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002680:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002688:	4948      	ldr	r1, [pc, #288]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800268a:	4313      	orrs	r3, r2
 800268c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002698:	2b00      	cmp	r3, #0
 800269a:	d015      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800269c:	4b43      	ldr	r3, [pc, #268]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800269e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	4940      	ldr	r1, [pc, #256]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026ba:	d105      	bne.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026bc:	4b3b      	ldr	r3, [pc, #236]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	4a3a      	ldr	r2, [pc, #232]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026c6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d015      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026d4:	4b35      	ldr	r3, [pc, #212]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e2:	4932      	ldr	r1, [pc, #200]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026f2:	d105      	bne.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026f4:	4b2d      	ldr	r3, [pc, #180]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	4a2c      	ldr	r2, [pc, #176]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026fe:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d015      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800270c:	4b27      	ldr	r3, [pc, #156]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002712:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271a:	4924      	ldr	r1, [pc, #144]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002726:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800272a:	d105      	bne.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800272c:	4b1f      	ldr	r3, [pc, #124]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	4a1e      	ldr	r2, [pc, #120]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002732:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002736:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d015      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002744:	4b19      	ldr	r3, [pc, #100]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002752:	4916      	ldr	r1, [pc, #88]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002754:	4313      	orrs	r3, r2
 8002756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002762:	d105      	bne.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002764:	4b11      	ldr	r3, [pc, #68]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	4a10      	ldr	r2, [pc, #64]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800276a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800276e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d019      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800277e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002782:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	4908      	ldr	r1, [pc, #32]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800278c:	4313      	orrs	r3, r2
 800278e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800279a:	d109      	bne.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800279c:	4b03      	ldr	r3, [pc, #12]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	4a02      	ldr	r2, [pc, #8]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027a6:	60d3      	str	r3, [r2, #12]
 80027a8:	e002      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80027aa:	bf00      	nop
 80027ac:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d015      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80027bc:	4b29      	ldr	r3, [pc, #164]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80027be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ca:	4926      	ldr	r1, [pc, #152]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027da:	d105      	bne.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027dc:	4b21      	ldr	r3, [pc, #132]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	4a20      	ldr	r2, [pc, #128]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80027e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d015      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80027f4:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fa:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002802:	4918      	ldr	r1, [pc, #96]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800280e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002812:	d105      	bne.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002814:	4b13      	ldr	r3, [pc, #76]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	4a12      	ldr	r2, [pc, #72]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800281a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800281e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d015      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800282c:	4b0d      	ldr	r3, [pc, #52]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800282e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002832:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283a:	490a      	ldr	r1, [pc, #40]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800283c:	4313      	orrs	r3, r2
 800283e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002846:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800284a:	d105      	bne.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800284c:	4b05      	ldr	r3, [pc, #20]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	4a04      	ldr	r2, [pc, #16]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002852:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002856:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002858:	7cbb      	ldrb	r3, [r7, #18]
}
 800285a:	4618      	mov	r0, r3
 800285c:	3718      	adds	r7, #24
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40021000 	.word	0x40021000

08002868 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e09d      	b.n	80029b6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	2b00      	cmp	r3, #0
 8002880:	d108      	bne.n	8002894 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800288a:	d009      	beq.n	80028a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	61da      	str	r2, [r3, #28]
 8002892:	e005      	b.n	80028a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d106      	bne.n	80028c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7fe f860 	bl	8000980 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2202      	movs	r2, #2
 80028c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028e0:	d902      	bls.n	80028e8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	e002      	b.n	80028ee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80028e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028ec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80028f6:	d007      	beq.n	8002908 <HAL_SPI_Init+0xa0>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002900:	d002      	beq.n	8002908 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002918:	431a      	orrs	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	431a      	orrs	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002940:	431a      	orrs	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294a:	ea42 0103 	orr.w	r1, r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002952:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	0c1b      	lsrs	r3, r3, #16
 8002964:	f003 0204 	and.w	r2, r3, #4
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	f003 0310 	and.w	r3, r3, #16
 8002970:	431a      	orrs	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002984:	ea42 0103 	orr.w	r1, r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	69da      	ldr	r2, [r3, #28]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b088      	sub	sp, #32
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	60f8      	str	r0, [r7, #12]
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	603b      	str	r3, [r7, #0]
 80029ca:	4613      	mov	r3, r2
 80029cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80029ce:	2300      	movs	r3, #0
 80029d0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d101      	bne.n	80029e0 <HAL_SPI_Transmit+0x22>
 80029dc:	2302      	movs	r3, #2
 80029de:	e158      	b.n	8002c92 <HAL_SPI_Transmit+0x2d4>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029e8:	f7fe fbf4 	bl	80011d4 <HAL_GetTick>
 80029ec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80029ee:	88fb      	ldrh	r3, [r7, #6]
 80029f0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d002      	beq.n	8002a04 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80029fe:	2302      	movs	r3, #2
 8002a00:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a02:	e13d      	b.n	8002c80 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d002      	beq.n	8002a10 <HAL_SPI_Transmit+0x52>
 8002a0a:	88fb      	ldrh	r3, [r7, #6]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d102      	bne.n	8002a16 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a14:	e134      	b.n	8002c80 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2203      	movs	r2, #3
 8002a1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	68ba      	ldr	r2, [r7, #8]
 8002a28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	88fa      	ldrh	r2, [r7, #6]
 8002a2e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	88fa      	ldrh	r2, [r7, #6]
 8002a34:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a60:	d10f      	bne.n	8002a82 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a80:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a8c:	2b40      	cmp	r3, #64	; 0x40
 8002a8e:	d007      	beq.n	8002aa0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002aa8:	d94b      	bls.n	8002b42 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d002      	beq.n	8002ab8 <HAL_SPI_Transmit+0xfa>
 8002ab2:	8afb      	ldrh	r3, [r7, #22]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d13e      	bne.n	8002b36 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abc:	881a      	ldrh	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac8:	1c9a      	adds	r2, r3, #2
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002adc:	e02b      	b.n	8002b36 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d112      	bne.n	8002b12 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af0:	881a      	ldrh	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afc:	1c9a      	adds	r2, r3, #2
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b10:	e011      	b.n	8002b36 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b12:	f7fe fb5f 	bl	80011d4 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d803      	bhi.n	8002b2a <HAL_SPI_Transmit+0x16c>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b28:	d102      	bne.n	8002b30 <HAL_SPI_Transmit+0x172>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d102      	bne.n	8002b36 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b34:	e0a4      	b.n	8002c80 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1ce      	bne.n	8002ade <HAL_SPI_Transmit+0x120>
 8002b40:	e07c      	b.n	8002c3c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <HAL_SPI_Transmit+0x192>
 8002b4a:	8afb      	ldrh	r3, [r7, #22]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d170      	bne.n	8002c32 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d912      	bls.n	8002b80 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5e:	881a      	ldrh	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6a:	1c9a      	adds	r2, r3, #2
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	3b02      	subs	r3, #2
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b7e:	e058      	b.n	8002c32 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	330c      	adds	r3, #12
 8002b8a:	7812      	ldrb	r2, [r2, #0]
 8002b8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b92:	1c5a      	adds	r2, r3, #1
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002ba6:	e044      	b.n	8002c32 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d12b      	bne.n	8002c0e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d912      	bls.n	8002be6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc4:	881a      	ldrh	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd0:	1c9a      	adds	r2, r3, #2
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	3b02      	subs	r3, #2
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002be4:	e025      	b.n	8002c32 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	330c      	adds	r3, #12
 8002bf0:	7812      	ldrb	r2, [r2, #0]
 8002bf2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c0c:	e011      	b.n	8002c32 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c0e:	f7fe fae1 	bl	80011d4 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d803      	bhi.n	8002c26 <HAL_SPI_Transmit+0x268>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c24:	d102      	bne.n	8002c2c <HAL_SPI_Transmit+0x26e>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d102      	bne.n	8002c32 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c30:	e026      	b.n	8002c80 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1b5      	bne.n	8002ba8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	6839      	ldr	r1, [r7, #0]
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 fb5b 	bl	80032fc <SPI_EndRxTxTransaction>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10a      	bne.n	8002c70 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d002      	beq.n	8002c7e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	77fb      	strb	r3, [r7, #31]
 8002c7c:	e000      	b.n	8002c80 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002c7e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002c90:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3720      	adds	r7, #32
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b08a      	sub	sp, #40	; 0x28
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	60f8      	str	r0, [r7, #12]
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	607a      	str	r2, [r7, #4]
 8002ca6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002cac:	2300      	movs	r3, #0
 8002cae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <HAL_SPI_TransmitReceive+0x26>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e1fb      	b.n	80030b8 <HAL_SPI_TransmitReceive+0x41e>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cc8:	f7fe fa84 	bl	80011d4 <HAL_GetTick>
 8002ccc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002cd4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002cdc:	887b      	ldrh	r3, [r7, #2]
 8002cde:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002ce0:	887b      	ldrh	r3, [r7, #2]
 8002ce2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ce4:	7efb      	ldrb	r3, [r7, #27]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d00e      	beq.n	8002d08 <HAL_SPI_TransmitReceive+0x6e>
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cf0:	d106      	bne.n	8002d00 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d102      	bne.n	8002d00 <HAL_SPI_TransmitReceive+0x66>
 8002cfa:	7efb      	ldrb	r3, [r7, #27]
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d003      	beq.n	8002d08 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002d00:	2302      	movs	r3, #2
 8002d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002d06:	e1cd      	b.n	80030a4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d005      	beq.n	8002d1a <HAL_SPI_TransmitReceive+0x80>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d002      	beq.n	8002d1a <HAL_SPI_TransmitReceive+0x80>
 8002d14:	887b      	ldrh	r3, [r7, #2]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d103      	bne.n	8002d22 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002d20:	e1c0      	b.n	80030a4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d003      	beq.n	8002d36 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2205      	movs	r2, #5
 8002d32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	887a      	ldrh	r2, [r7, #2]
 8002d46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	887a      	ldrh	r2, [r7, #2]
 8002d4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	887a      	ldrh	r2, [r7, #2]
 8002d5c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	887a      	ldrh	r2, [r7, #2]
 8002d62:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d78:	d802      	bhi.n	8002d80 <HAL_SPI_TransmitReceive+0xe6>
 8002d7a:	8a3b      	ldrh	r3, [r7, #16]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d908      	bls.n	8002d92 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d8e:	605a      	str	r2, [r3, #4]
 8002d90:	e007      	b.n	8002da2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002da0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dac:	2b40      	cmp	r3, #64	; 0x40
 8002dae:	d007      	beq.n	8002dc0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002dc8:	d97c      	bls.n	8002ec4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <HAL_SPI_TransmitReceive+0x13e>
 8002dd2:	8a7b      	ldrh	r3, [r7, #18]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d169      	bne.n	8002eac <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ddc:	881a      	ldrh	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de8:	1c9a      	adds	r2, r3, #2
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dfc:	e056      	b.n	8002eac <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d11b      	bne.n	8002e44 <HAL_SPI_TransmitReceive+0x1aa>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d016      	beq.n	8002e44 <HAL_SPI_TransmitReceive+0x1aa>
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d113      	bne.n	8002e44 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e20:	881a      	ldrh	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2c:	1c9a      	adds	r2, r3, #2
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d11c      	bne.n	8002e8c <HAL_SPI_TransmitReceive+0x1f2>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d016      	beq.n	8002e8c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68da      	ldr	r2, [r3, #12]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	b292      	uxth	r2, r2
 8002e6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	1c9a      	adds	r2, r3, #2
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002e8c:	f7fe f9a2 	bl	80011d4 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d807      	bhi.n	8002eac <HAL_SPI_TransmitReceive+0x212>
 8002e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea2:	d003      	beq.n	8002eac <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002eaa:	e0fb      	b.n	80030a4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1a3      	bne.n	8002dfe <HAL_SPI_TransmitReceive+0x164>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d19d      	bne.n	8002dfe <HAL_SPI_TransmitReceive+0x164>
 8002ec2:	e0df      	b.n	8003084 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_SPI_TransmitReceive+0x23a>
 8002ecc:	8a7b      	ldrh	r3, [r7, #18]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	f040 80cb 	bne.w	800306a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d912      	bls.n	8002f04 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee2:	881a      	ldrh	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eee:	1c9a      	adds	r2, r3, #2
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	3b02      	subs	r3, #2
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f02:	e0b2      	b.n	800306a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	330c      	adds	r3, #12
 8002f0e:	7812      	ldrb	r2, [r2, #0]
 8002f10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f16:	1c5a      	adds	r2, r3, #1
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f2a:	e09e      	b.n	800306a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d134      	bne.n	8002fa4 <HAL_SPI_TransmitReceive+0x30a>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d02f      	beq.n	8002fa4 <HAL_SPI_TransmitReceive+0x30a>
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d12c      	bne.n	8002fa4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d912      	bls.n	8002f7a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f58:	881a      	ldrh	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f64:	1c9a      	adds	r2, r3, #2
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	3b02      	subs	r3, #2
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f78:	e012      	b.n	8002fa0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	330c      	adds	r3, #12
 8002f84:	7812      	ldrb	r2, [r2, #0]
 8002f86:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d148      	bne.n	8003044 <HAL_SPI_TransmitReceive+0x3aa>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d042      	beq.n	8003044 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d923      	bls.n	8003012 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68da      	ldr	r2, [r3, #12]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd4:	b292      	uxth	r2, r2
 8002fd6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	1c9a      	adds	r2, r3, #2
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	3b02      	subs	r3, #2
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d81f      	bhi.n	8003040 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800300e:	605a      	str	r2, [r3, #4]
 8003010:	e016      	b.n	8003040 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f103 020c 	add.w	r2, r3, #12
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	7812      	ldrb	r2, [r2, #0]
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003034:	b29b      	uxth	r3, r3
 8003036:	3b01      	subs	r3, #1
 8003038:	b29a      	uxth	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003040:	2301      	movs	r3, #1
 8003042:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003044:	f7fe f8c6 	bl	80011d4 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003050:	429a      	cmp	r2, r3
 8003052:	d803      	bhi.n	800305c <HAL_SPI_TransmitReceive+0x3c2>
 8003054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305a:	d102      	bne.n	8003062 <HAL_SPI_TransmitReceive+0x3c8>
 800305c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305e:	2b00      	cmp	r3, #0
 8003060:	d103      	bne.n	800306a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003068:	e01c      	b.n	80030a4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800306e:	b29b      	uxth	r3, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	f47f af5b 	bne.w	8002f2c <HAL_SPI_TransmitReceive+0x292>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800307c:	b29b      	uxth	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	f47f af54 	bne.w	8002f2c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003084:	69fa      	ldr	r2, [r7, #28]
 8003086:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 f937 	bl	80032fc <SPI_EndRxTxTransaction>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d006      	beq.n	80030a2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2220      	movs	r2, #32
 800309e:	661a      	str	r2, [r3, #96]	; 0x60
 80030a0:	e000      	b.n	80030a4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80030a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80030b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3728      	adds	r7, #40	; 0x28
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b088      	sub	sp, #32
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	603b      	str	r3, [r7, #0]
 80030cc:	4613      	mov	r3, r2
 80030ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80030d0:	f7fe f880 	bl	80011d4 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d8:	1a9b      	subs	r3, r3, r2
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	4413      	add	r3, r2
 80030de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80030e0:	f7fe f878 	bl	80011d4 <HAL_GetTick>
 80030e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80030e6:	4b39      	ldr	r3, [pc, #228]	; (80031cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	015b      	lsls	r3, r3, #5
 80030ec:	0d1b      	lsrs	r3, r3, #20
 80030ee:	69fa      	ldr	r2, [r7, #28]
 80030f0:	fb02 f303 	mul.w	r3, r2, r3
 80030f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030f6:	e054      	b.n	80031a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fe:	d050      	beq.n	80031a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003100:	f7fe f868 	bl	80011d4 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	69fa      	ldr	r2, [r7, #28]
 800310c:	429a      	cmp	r2, r3
 800310e:	d902      	bls.n	8003116 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d13d      	bne.n	8003192 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003124:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800312e:	d111      	bne.n	8003154 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003138:	d004      	beq.n	8003144 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003142:	d107      	bne.n	8003154 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003152:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800315c:	d10f      	bne.n	800317e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800317c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e017      	b.n	80031c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003198:	2300      	movs	r3, #0
 800319a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	3b01      	subs	r3, #1
 80031a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	4013      	ands	r3, r2
 80031ac:	68ba      	ldr	r2, [r7, #8]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	bf0c      	ite	eq
 80031b2:	2301      	moveq	r3, #1
 80031b4:	2300      	movne	r3, #0
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	461a      	mov	r2, r3
 80031ba:	79fb      	ldrb	r3, [r7, #7]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d19b      	bne.n	80030f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3720      	adds	r7, #32
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000000 	.word	0x20000000

080031d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b08a      	sub	sp, #40	; 0x28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
 80031dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80031de:	2300      	movs	r3, #0
 80031e0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80031e2:	f7fd fff7 	bl	80011d4 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ea:	1a9b      	subs	r3, r3, r2
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	4413      	add	r3, r2
 80031f0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80031f2:	f7fd ffef 	bl	80011d4 <HAL_GetTick>
 80031f6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	330c      	adds	r3, #12
 80031fe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003200:	4b3d      	ldr	r3, [pc, #244]	; (80032f8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	4613      	mov	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	00da      	lsls	r2, r3, #3
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	0d1b      	lsrs	r3, r3, #20
 8003210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003212:	fb02 f303 	mul.w	r3, r2, r3
 8003216:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003218:	e060      	b.n	80032dc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003220:	d107      	bne.n	8003232 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d104      	bne.n	8003232 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003230:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003238:	d050      	beq.n	80032dc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800323a:	f7fd ffcb 	bl	80011d4 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003246:	429a      	cmp	r2, r3
 8003248:	d902      	bls.n	8003250 <SPI_WaitFifoStateUntilTimeout+0x80>
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	2b00      	cmp	r3, #0
 800324e:	d13d      	bne.n	80032cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800325e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003268:	d111      	bne.n	800328e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003272:	d004      	beq.n	800327e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800327c:	d107      	bne.n	800328e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800328c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003292:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003296:	d10f      	bne.n	80032b8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e010      	b.n	80032ee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80032d2:	2300      	movs	r3, #0
 80032d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	3b01      	subs	r3, #1
 80032da:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	4013      	ands	r3, r2
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d196      	bne.n	800321a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3728      	adds	r7, #40	; 0x28
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	20000000 	.word	0x20000000

080032fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af02      	add	r7, sp, #8
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	9300      	str	r3, [sp, #0]
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2200      	movs	r2, #0
 8003310:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f7ff ff5b 	bl	80031d0 <SPI_WaitFifoStateUntilTimeout>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d007      	beq.n	8003330 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003324:	f043 0220 	orr.w	r2, r3, #32
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e027      	b.n	8003380 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2200      	movs	r2, #0
 8003338:	2180      	movs	r1, #128	; 0x80
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f7ff fec0 	bl	80030c0 <SPI_WaitFlagStateUntilTimeout>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d007      	beq.n	8003356 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800334a:	f043 0220 	orr.w	r2, r3, #32
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e014      	b.n	8003380 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2200      	movs	r2, #0
 800335e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f7ff ff34 	bl	80031d0 <SPI_WaitFifoStateUntilTimeout>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d007      	beq.n	800337e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003372:	f043 0220 	orr.w	r2, r3, #32
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e000      	b.n	8003380 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e042      	b.n	8003420 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d106      	bne.n	80033b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7fd fa8f 	bl	80008d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2224      	movs	r2, #36	; 0x24
 80033b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0201 	bic.w	r2, r2, #1
 80033c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f82c 	bl	8003428 <UART_SetConfig>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d101      	bne.n	80033da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e022      	b.n	8003420 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d002      	beq.n	80033e8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 fb1c 	bl	8003a20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689a      	ldr	r2, [r3, #8]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003406:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 fba3 	bl	8003b64 <UART_CheckIdleState>
 800341e:	4603      	mov	r3, r0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800342c:	b08c      	sub	sp, #48	; 0x30
 800342e:	af00      	add	r7, sp, #0
 8003430:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003432:	2300      	movs	r3, #0
 8003434:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	431a      	orrs	r2, r3
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	431a      	orrs	r2, r3
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	69db      	ldr	r3, [r3, #28]
 800344c:	4313      	orrs	r3, r2
 800344e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	4baa      	ldr	r3, [pc, #680]	; (8003700 <UART_SetConfig+0x2d8>)
 8003458:	4013      	ands	r3, r2
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	6812      	ldr	r2, [r2, #0]
 800345e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003460:	430b      	orrs	r3, r1
 8003462:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	68da      	ldr	r2, [r3, #12]
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a9f      	ldr	r2, [pc, #636]	; (8003704 <UART_SetConfig+0x2dc>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d004      	beq.n	8003494 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003490:	4313      	orrs	r3, r2
 8003492:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800349e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	6812      	ldr	r2, [r2, #0]
 80034a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034a8:	430b      	orrs	r3, r1
 80034aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b2:	f023 010f 	bic.w	r1, r3, #15
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a90      	ldr	r2, [pc, #576]	; (8003708 <UART_SetConfig+0x2e0>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d125      	bne.n	8003518 <UART_SetConfig+0xf0>
 80034cc:	4b8f      	ldr	r3, [pc, #572]	; (800370c <UART_SetConfig+0x2e4>)
 80034ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	2b03      	cmp	r3, #3
 80034d8:	d81a      	bhi.n	8003510 <UART_SetConfig+0xe8>
 80034da:	a201      	add	r2, pc, #4	; (adr r2, 80034e0 <UART_SetConfig+0xb8>)
 80034dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e0:	080034f1 	.word	0x080034f1
 80034e4:	08003501 	.word	0x08003501
 80034e8:	080034f9 	.word	0x080034f9
 80034ec:	08003509 	.word	0x08003509
 80034f0:	2301      	movs	r3, #1
 80034f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034f6:	e116      	b.n	8003726 <UART_SetConfig+0x2fe>
 80034f8:	2302      	movs	r3, #2
 80034fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034fe:	e112      	b.n	8003726 <UART_SetConfig+0x2fe>
 8003500:	2304      	movs	r3, #4
 8003502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003506:	e10e      	b.n	8003726 <UART_SetConfig+0x2fe>
 8003508:	2308      	movs	r3, #8
 800350a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800350e:	e10a      	b.n	8003726 <UART_SetConfig+0x2fe>
 8003510:	2310      	movs	r3, #16
 8003512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003516:	e106      	b.n	8003726 <UART_SetConfig+0x2fe>
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a7c      	ldr	r2, [pc, #496]	; (8003710 <UART_SetConfig+0x2e8>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d138      	bne.n	8003594 <UART_SetConfig+0x16c>
 8003522:	4b7a      	ldr	r3, [pc, #488]	; (800370c <UART_SetConfig+0x2e4>)
 8003524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003528:	f003 030c 	and.w	r3, r3, #12
 800352c:	2b0c      	cmp	r3, #12
 800352e:	d82d      	bhi.n	800358c <UART_SetConfig+0x164>
 8003530:	a201      	add	r2, pc, #4	; (adr r2, 8003538 <UART_SetConfig+0x110>)
 8003532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003536:	bf00      	nop
 8003538:	0800356d 	.word	0x0800356d
 800353c:	0800358d 	.word	0x0800358d
 8003540:	0800358d 	.word	0x0800358d
 8003544:	0800358d 	.word	0x0800358d
 8003548:	0800357d 	.word	0x0800357d
 800354c:	0800358d 	.word	0x0800358d
 8003550:	0800358d 	.word	0x0800358d
 8003554:	0800358d 	.word	0x0800358d
 8003558:	08003575 	.word	0x08003575
 800355c:	0800358d 	.word	0x0800358d
 8003560:	0800358d 	.word	0x0800358d
 8003564:	0800358d 	.word	0x0800358d
 8003568:	08003585 	.word	0x08003585
 800356c:	2300      	movs	r3, #0
 800356e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003572:	e0d8      	b.n	8003726 <UART_SetConfig+0x2fe>
 8003574:	2302      	movs	r3, #2
 8003576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800357a:	e0d4      	b.n	8003726 <UART_SetConfig+0x2fe>
 800357c:	2304      	movs	r3, #4
 800357e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003582:	e0d0      	b.n	8003726 <UART_SetConfig+0x2fe>
 8003584:	2308      	movs	r3, #8
 8003586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800358a:	e0cc      	b.n	8003726 <UART_SetConfig+0x2fe>
 800358c:	2310      	movs	r3, #16
 800358e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003592:	e0c8      	b.n	8003726 <UART_SetConfig+0x2fe>
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a5e      	ldr	r2, [pc, #376]	; (8003714 <UART_SetConfig+0x2ec>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d125      	bne.n	80035ea <UART_SetConfig+0x1c2>
 800359e:	4b5b      	ldr	r3, [pc, #364]	; (800370c <UART_SetConfig+0x2e4>)
 80035a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80035a8:	2b30      	cmp	r3, #48	; 0x30
 80035aa:	d016      	beq.n	80035da <UART_SetConfig+0x1b2>
 80035ac:	2b30      	cmp	r3, #48	; 0x30
 80035ae:	d818      	bhi.n	80035e2 <UART_SetConfig+0x1ba>
 80035b0:	2b20      	cmp	r3, #32
 80035b2:	d00a      	beq.n	80035ca <UART_SetConfig+0x1a2>
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	d814      	bhi.n	80035e2 <UART_SetConfig+0x1ba>
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d002      	beq.n	80035c2 <UART_SetConfig+0x19a>
 80035bc:	2b10      	cmp	r3, #16
 80035be:	d008      	beq.n	80035d2 <UART_SetConfig+0x1aa>
 80035c0:	e00f      	b.n	80035e2 <UART_SetConfig+0x1ba>
 80035c2:	2300      	movs	r3, #0
 80035c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035c8:	e0ad      	b.n	8003726 <UART_SetConfig+0x2fe>
 80035ca:	2302      	movs	r3, #2
 80035cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035d0:	e0a9      	b.n	8003726 <UART_SetConfig+0x2fe>
 80035d2:	2304      	movs	r3, #4
 80035d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035d8:	e0a5      	b.n	8003726 <UART_SetConfig+0x2fe>
 80035da:	2308      	movs	r3, #8
 80035dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035e0:	e0a1      	b.n	8003726 <UART_SetConfig+0x2fe>
 80035e2:	2310      	movs	r3, #16
 80035e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035e8:	e09d      	b.n	8003726 <UART_SetConfig+0x2fe>
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a4a      	ldr	r2, [pc, #296]	; (8003718 <UART_SetConfig+0x2f0>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d125      	bne.n	8003640 <UART_SetConfig+0x218>
 80035f4:	4b45      	ldr	r3, [pc, #276]	; (800370c <UART_SetConfig+0x2e4>)
 80035f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80035fe:	2bc0      	cmp	r3, #192	; 0xc0
 8003600:	d016      	beq.n	8003630 <UART_SetConfig+0x208>
 8003602:	2bc0      	cmp	r3, #192	; 0xc0
 8003604:	d818      	bhi.n	8003638 <UART_SetConfig+0x210>
 8003606:	2b80      	cmp	r3, #128	; 0x80
 8003608:	d00a      	beq.n	8003620 <UART_SetConfig+0x1f8>
 800360a:	2b80      	cmp	r3, #128	; 0x80
 800360c:	d814      	bhi.n	8003638 <UART_SetConfig+0x210>
 800360e:	2b00      	cmp	r3, #0
 8003610:	d002      	beq.n	8003618 <UART_SetConfig+0x1f0>
 8003612:	2b40      	cmp	r3, #64	; 0x40
 8003614:	d008      	beq.n	8003628 <UART_SetConfig+0x200>
 8003616:	e00f      	b.n	8003638 <UART_SetConfig+0x210>
 8003618:	2300      	movs	r3, #0
 800361a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800361e:	e082      	b.n	8003726 <UART_SetConfig+0x2fe>
 8003620:	2302      	movs	r3, #2
 8003622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003626:	e07e      	b.n	8003726 <UART_SetConfig+0x2fe>
 8003628:	2304      	movs	r3, #4
 800362a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800362e:	e07a      	b.n	8003726 <UART_SetConfig+0x2fe>
 8003630:	2308      	movs	r3, #8
 8003632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003636:	e076      	b.n	8003726 <UART_SetConfig+0x2fe>
 8003638:	2310      	movs	r3, #16
 800363a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800363e:	e072      	b.n	8003726 <UART_SetConfig+0x2fe>
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a35      	ldr	r2, [pc, #212]	; (800371c <UART_SetConfig+0x2f4>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d12a      	bne.n	80036a0 <UART_SetConfig+0x278>
 800364a:	4b30      	ldr	r3, [pc, #192]	; (800370c <UART_SetConfig+0x2e4>)
 800364c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003650:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003654:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003658:	d01a      	beq.n	8003690 <UART_SetConfig+0x268>
 800365a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800365e:	d81b      	bhi.n	8003698 <UART_SetConfig+0x270>
 8003660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003664:	d00c      	beq.n	8003680 <UART_SetConfig+0x258>
 8003666:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800366a:	d815      	bhi.n	8003698 <UART_SetConfig+0x270>
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <UART_SetConfig+0x250>
 8003670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003674:	d008      	beq.n	8003688 <UART_SetConfig+0x260>
 8003676:	e00f      	b.n	8003698 <UART_SetConfig+0x270>
 8003678:	2300      	movs	r3, #0
 800367a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800367e:	e052      	b.n	8003726 <UART_SetConfig+0x2fe>
 8003680:	2302      	movs	r3, #2
 8003682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003686:	e04e      	b.n	8003726 <UART_SetConfig+0x2fe>
 8003688:	2304      	movs	r3, #4
 800368a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800368e:	e04a      	b.n	8003726 <UART_SetConfig+0x2fe>
 8003690:	2308      	movs	r3, #8
 8003692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003696:	e046      	b.n	8003726 <UART_SetConfig+0x2fe>
 8003698:	2310      	movs	r3, #16
 800369a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800369e:	e042      	b.n	8003726 <UART_SetConfig+0x2fe>
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a17      	ldr	r2, [pc, #92]	; (8003704 <UART_SetConfig+0x2dc>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d13a      	bne.n	8003720 <UART_SetConfig+0x2f8>
 80036aa:	4b18      	ldr	r3, [pc, #96]	; (800370c <UART_SetConfig+0x2e4>)
 80036ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036b8:	d01a      	beq.n	80036f0 <UART_SetConfig+0x2c8>
 80036ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036be:	d81b      	bhi.n	80036f8 <UART_SetConfig+0x2d0>
 80036c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036c4:	d00c      	beq.n	80036e0 <UART_SetConfig+0x2b8>
 80036c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036ca:	d815      	bhi.n	80036f8 <UART_SetConfig+0x2d0>
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <UART_SetConfig+0x2b0>
 80036d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d4:	d008      	beq.n	80036e8 <UART_SetConfig+0x2c0>
 80036d6:	e00f      	b.n	80036f8 <UART_SetConfig+0x2d0>
 80036d8:	2300      	movs	r3, #0
 80036da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036de:	e022      	b.n	8003726 <UART_SetConfig+0x2fe>
 80036e0:	2302      	movs	r3, #2
 80036e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036e6:	e01e      	b.n	8003726 <UART_SetConfig+0x2fe>
 80036e8:	2304      	movs	r3, #4
 80036ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036ee:	e01a      	b.n	8003726 <UART_SetConfig+0x2fe>
 80036f0:	2308      	movs	r3, #8
 80036f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036f6:	e016      	b.n	8003726 <UART_SetConfig+0x2fe>
 80036f8:	2310      	movs	r3, #16
 80036fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036fe:	e012      	b.n	8003726 <UART_SetConfig+0x2fe>
 8003700:	cfff69f3 	.word	0xcfff69f3
 8003704:	40008000 	.word	0x40008000
 8003708:	40013800 	.word	0x40013800
 800370c:	40021000 	.word	0x40021000
 8003710:	40004400 	.word	0x40004400
 8003714:	40004800 	.word	0x40004800
 8003718:	40004c00 	.word	0x40004c00
 800371c:	40005000 	.word	0x40005000
 8003720:	2310      	movs	r3, #16
 8003722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4aae      	ldr	r2, [pc, #696]	; (80039e4 <UART_SetConfig+0x5bc>)
 800372c:	4293      	cmp	r3, r2
 800372e:	f040 8097 	bne.w	8003860 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003732:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003736:	2b08      	cmp	r3, #8
 8003738:	d823      	bhi.n	8003782 <UART_SetConfig+0x35a>
 800373a:	a201      	add	r2, pc, #4	; (adr r2, 8003740 <UART_SetConfig+0x318>)
 800373c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003740:	08003765 	.word	0x08003765
 8003744:	08003783 	.word	0x08003783
 8003748:	0800376d 	.word	0x0800376d
 800374c:	08003783 	.word	0x08003783
 8003750:	08003773 	.word	0x08003773
 8003754:	08003783 	.word	0x08003783
 8003758:	08003783 	.word	0x08003783
 800375c:	08003783 	.word	0x08003783
 8003760:	0800377b 	.word	0x0800377b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003764:	f7fe fdc0 	bl	80022e8 <HAL_RCC_GetPCLK1Freq>
 8003768:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800376a:	e010      	b.n	800378e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800376c:	4b9e      	ldr	r3, [pc, #632]	; (80039e8 <UART_SetConfig+0x5c0>)
 800376e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003770:	e00d      	b.n	800378e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003772:	f7fe fd4b 	bl	800220c <HAL_RCC_GetSysClockFreq>
 8003776:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003778:	e009      	b.n	800378e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800377a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800377e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003780:	e005      	b.n	800378e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003782:	2300      	movs	r3, #0
 8003784:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800378c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 8130 	beq.w	80039f6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	4a94      	ldr	r2, [pc, #592]	; (80039ec <UART_SetConfig+0x5c4>)
 800379c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037a0:	461a      	mov	r2, r3
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	4613      	mov	r3, r2
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	4413      	add	r3, r2
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d305      	bcc.n	80037c6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d903      	bls.n	80037ce <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80037cc:	e113      	b.n	80039f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	2200      	movs	r2, #0
 80037d2:	60bb      	str	r3, [r7, #8]
 80037d4:	60fa      	str	r2, [r7, #12]
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	4a84      	ldr	r2, [pc, #528]	; (80039ec <UART_SetConfig+0x5c4>)
 80037dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	2200      	movs	r2, #0
 80037e4:	603b      	str	r3, [r7, #0]
 80037e6:	607a      	str	r2, [r7, #4]
 80037e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037f0:	f7fc fd12 	bl	8000218 <__aeabi_uldivmod>
 80037f4:	4602      	mov	r2, r0
 80037f6:	460b      	mov	r3, r1
 80037f8:	4610      	mov	r0, r2
 80037fa:	4619      	mov	r1, r3
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	f04f 0300 	mov.w	r3, #0
 8003804:	020b      	lsls	r3, r1, #8
 8003806:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800380a:	0202      	lsls	r2, r0, #8
 800380c:	6979      	ldr	r1, [r7, #20]
 800380e:	6849      	ldr	r1, [r1, #4]
 8003810:	0849      	lsrs	r1, r1, #1
 8003812:	2000      	movs	r0, #0
 8003814:	460c      	mov	r4, r1
 8003816:	4605      	mov	r5, r0
 8003818:	eb12 0804 	adds.w	r8, r2, r4
 800381c:	eb43 0905 	adc.w	r9, r3, r5
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	469a      	mov	sl, r3
 8003828:	4693      	mov	fp, r2
 800382a:	4652      	mov	r2, sl
 800382c:	465b      	mov	r3, fp
 800382e:	4640      	mov	r0, r8
 8003830:	4649      	mov	r1, r9
 8003832:	f7fc fcf1 	bl	8000218 <__aeabi_uldivmod>
 8003836:	4602      	mov	r2, r0
 8003838:	460b      	mov	r3, r1
 800383a:	4613      	mov	r3, r2
 800383c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800383e:	6a3b      	ldr	r3, [r7, #32]
 8003840:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003844:	d308      	bcc.n	8003858 <UART_SetConfig+0x430>
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800384c:	d204      	bcs.n	8003858 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6a3a      	ldr	r2, [r7, #32]
 8003854:	60da      	str	r2, [r3, #12]
 8003856:	e0ce      	b.n	80039f6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800385e:	e0ca      	b.n	80039f6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	69db      	ldr	r3, [r3, #28]
 8003864:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003868:	d166      	bne.n	8003938 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800386a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800386e:	2b08      	cmp	r3, #8
 8003870:	d827      	bhi.n	80038c2 <UART_SetConfig+0x49a>
 8003872:	a201      	add	r2, pc, #4	; (adr r2, 8003878 <UART_SetConfig+0x450>)
 8003874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003878:	0800389d 	.word	0x0800389d
 800387c:	080038a5 	.word	0x080038a5
 8003880:	080038ad 	.word	0x080038ad
 8003884:	080038c3 	.word	0x080038c3
 8003888:	080038b3 	.word	0x080038b3
 800388c:	080038c3 	.word	0x080038c3
 8003890:	080038c3 	.word	0x080038c3
 8003894:	080038c3 	.word	0x080038c3
 8003898:	080038bb 	.word	0x080038bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800389c:	f7fe fd24 	bl	80022e8 <HAL_RCC_GetPCLK1Freq>
 80038a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80038a2:	e014      	b.n	80038ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038a4:	f7fe fd36 	bl	8002314 <HAL_RCC_GetPCLK2Freq>
 80038a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80038aa:	e010      	b.n	80038ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038ac:	4b4e      	ldr	r3, [pc, #312]	; (80039e8 <UART_SetConfig+0x5c0>)
 80038ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80038b0:	e00d      	b.n	80038ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038b2:	f7fe fcab 	bl	800220c <HAL_RCC_GetSysClockFreq>
 80038b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80038b8:	e009      	b.n	80038ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80038c0:	e005      	b.n	80038ce <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80038cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 8090 	beq.w	80039f6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	4a44      	ldr	r2, [pc, #272]	; (80039ec <UART_SetConfig+0x5c4>)
 80038dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038e0:	461a      	mov	r2, r3
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80038e8:	005a      	lsls	r2, r3, #1
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	085b      	lsrs	r3, r3, #1
 80038f0:	441a      	add	r2, r3
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038fc:	6a3b      	ldr	r3, [r7, #32]
 80038fe:	2b0f      	cmp	r3, #15
 8003900:	d916      	bls.n	8003930 <UART_SetConfig+0x508>
 8003902:	6a3b      	ldr	r3, [r7, #32]
 8003904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003908:	d212      	bcs.n	8003930 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800390a:	6a3b      	ldr	r3, [r7, #32]
 800390c:	b29b      	uxth	r3, r3
 800390e:	f023 030f 	bic.w	r3, r3, #15
 8003912:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	085b      	lsrs	r3, r3, #1
 8003918:	b29b      	uxth	r3, r3
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	b29a      	uxth	r2, r3
 8003920:	8bfb      	ldrh	r3, [r7, #30]
 8003922:	4313      	orrs	r3, r2
 8003924:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	8bfa      	ldrh	r2, [r7, #30]
 800392c:	60da      	str	r2, [r3, #12]
 800392e:	e062      	b.n	80039f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003936:	e05e      	b.n	80039f6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003938:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800393c:	2b08      	cmp	r3, #8
 800393e:	d828      	bhi.n	8003992 <UART_SetConfig+0x56a>
 8003940:	a201      	add	r2, pc, #4	; (adr r2, 8003948 <UART_SetConfig+0x520>)
 8003942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003946:	bf00      	nop
 8003948:	0800396d 	.word	0x0800396d
 800394c:	08003975 	.word	0x08003975
 8003950:	0800397d 	.word	0x0800397d
 8003954:	08003993 	.word	0x08003993
 8003958:	08003983 	.word	0x08003983
 800395c:	08003993 	.word	0x08003993
 8003960:	08003993 	.word	0x08003993
 8003964:	08003993 	.word	0x08003993
 8003968:	0800398b 	.word	0x0800398b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800396c:	f7fe fcbc 	bl	80022e8 <HAL_RCC_GetPCLK1Freq>
 8003970:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003972:	e014      	b.n	800399e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003974:	f7fe fcce 	bl	8002314 <HAL_RCC_GetPCLK2Freq>
 8003978:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800397a:	e010      	b.n	800399e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800397c:	4b1a      	ldr	r3, [pc, #104]	; (80039e8 <UART_SetConfig+0x5c0>)
 800397e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003980:	e00d      	b.n	800399e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003982:	f7fe fc43 	bl	800220c <HAL_RCC_GetSysClockFreq>
 8003986:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003988:	e009      	b.n	800399e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800398a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800398e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003990:	e005      	b.n	800399e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003992:	2300      	movs	r3, #0
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800399c:	bf00      	nop
    }

    if (pclk != 0U)
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d028      	beq.n	80039f6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	4a10      	ldr	r2, [pc, #64]	; (80039ec <UART_SetConfig+0x5c4>)
 80039aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039ae:	461a      	mov	r2, r3
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	085b      	lsrs	r3, r3, #1
 80039bc:	441a      	add	r2, r3
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	2b0f      	cmp	r3, #15
 80039cc:	d910      	bls.n	80039f0 <UART_SetConfig+0x5c8>
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d4:	d20c      	bcs.n	80039f0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	b29a      	uxth	r2, r3
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	60da      	str	r2, [r3, #12]
 80039e0:	e009      	b.n	80039f6 <UART_SetConfig+0x5ce>
 80039e2:	bf00      	nop
 80039e4:	40008000 	.word	0x40008000
 80039e8:	00f42400 	.word	0x00f42400
 80039ec:	08004018 	.word	0x08004018
      }
      else
      {
        ret = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003a12:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3730      	adds	r7, #48	; 0x30
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003a20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00a      	beq.n	8003a4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00a      	beq.n	8003a6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00a      	beq.n	8003a8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a92:	f003 0308 	and.w	r3, r3, #8
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00a      	beq.n	8003ab0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab4:	f003 0310 	and.w	r3, r3, #16
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00a      	beq.n	8003ad2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad6:	f003 0320 	and.w	r3, r3, #32
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00a      	beq.n	8003af4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d01a      	beq.n	8003b36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b1e:	d10a      	bne.n	8003b36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00a      	beq.n	8003b58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	605a      	str	r2, [r3, #4]
  }
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af02      	add	r7, sp, #8
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b74:	f7fd fb2e 	bl	80011d4 <HAL_GetTick>
 8003b78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0308 	and.w	r3, r3, #8
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d10e      	bne.n	8003ba6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f82f 	bl	8003bfa <UART_WaitOnFlagUntilTimeout>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e025      	b.n	8003bf2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d10e      	bne.n	8003bd2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f819 	bl	8003bfa <UART_WaitOnFlagUntilTimeout>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e00f      	b.n	8003bf2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b09c      	sub	sp, #112	; 0x70
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	60f8      	str	r0, [r7, #12]
 8003c02:	60b9      	str	r1, [r7, #8]
 8003c04:	603b      	str	r3, [r7, #0]
 8003c06:	4613      	mov	r3, r2
 8003c08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c0a:	e0a9      	b.n	8003d60 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c12:	f000 80a5 	beq.w	8003d60 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c16:	f7fd fadd 	bl	80011d4 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d302      	bcc.n	8003c2c <UART_WaitOnFlagUntilTimeout+0x32>
 8003c26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d140      	bne.n	8003cae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c34:	e853 3f00 	ldrex	r3, [r3]
 8003c38:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c40:	667b      	str	r3, [r7, #100]	; 0x64
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c4c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003c50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c52:	e841 2300 	strex	r3, r2, [r1]
 8003c56:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1e6      	bne.n	8003c2c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	3308      	adds	r3, #8
 8003c64:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c68:	e853 3f00 	ldrex	r3, [r3]
 8003c6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c70:	f023 0301 	bic.w	r3, r3, #1
 8003c74:	663b      	str	r3, [r7, #96]	; 0x60
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	3308      	adds	r3, #8
 8003c7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c7e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c80:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c86:	e841 2300 	strex	r3, r2, [r1]
 8003c8a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1e5      	bne.n	8003c5e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2220      	movs	r2, #32
 8003c96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e069      	b.n	8003d82 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d051      	beq.n	8003d60 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cca:	d149      	bne.n	8003d60 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cd4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cde:	e853 3f00 	ldrex	r3, [r3]
 8003ce2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cf4:	637b      	str	r3, [r7, #52]	; 0x34
 8003cf6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cfc:	e841 2300 	strex	r3, r2, [r1]
 8003d00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1e6      	bne.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	3308      	adds	r3, #8
 8003d0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	e853 3f00 	ldrex	r3, [r3]
 8003d16:	613b      	str	r3, [r7, #16]
   return(result);
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f023 0301 	bic.w	r3, r3, #1
 8003d1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	3308      	adds	r3, #8
 8003d26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d28:	623a      	str	r2, [r7, #32]
 8003d2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2c:	69f9      	ldr	r1, [r7, #28]
 8003d2e:	6a3a      	ldr	r2, [r7, #32]
 8003d30:	e841 2300 	strex	r3, r2, [r1]
 8003d34:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1e5      	bne.n	8003d08 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2220      	movs	r2, #32
 8003d48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e010      	b.n	8003d82 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	69da      	ldr	r2, [r3, #28]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	bf0c      	ite	eq
 8003d70:	2301      	moveq	r3, #1
 8003d72:	2300      	movne	r3, #0
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	461a      	mov	r2, r3
 8003d78:	79fb      	ldrb	r3, [r7, #7]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	f43f af46 	beq.w	8003c0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3770      	adds	r7, #112	; 0x70
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b085      	sub	sp, #20
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d101      	bne.n	8003da0 <HAL_UARTEx_DisableFifoMode+0x16>
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	e027      	b.n	8003df0 <HAL_UARTEx_DisableFifoMode+0x66>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2224      	movs	r2, #36	; 0x24
 8003dac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0201 	bic.w	r2, r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003dce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2220      	movs	r2, #32
 8003de2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3714      	adds	r7, #20
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e02d      	b.n	8003e70 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2224      	movs	r2, #36	; 0x24
 8003e20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0201 	bic.w	r2, r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f84f 	bl	8003ef4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2220      	movs	r2, #32
 8003e62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d101      	bne.n	8003e90 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e02d      	b.n	8003eec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2224      	movs	r2, #36	; 0x24
 8003e9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 0201 	bic.w	r2, r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f811 	bl	8003ef4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2220      	movs	r2, #32
 8003ede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d108      	bne.n	8003f16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003f14:	e031      	b.n	8003f7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003f16:	2308      	movs	r3, #8
 8003f18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003f1a:	2308      	movs	r3, #8
 8003f1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	0e5b      	lsrs	r3, r3, #25
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	0f5b      	lsrs	r3, r3, #29
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	f003 0307 	and.w	r3, r3, #7
 8003f3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f3e:	7bbb      	ldrb	r3, [r7, #14]
 8003f40:	7b3a      	ldrb	r2, [r7, #12]
 8003f42:	4911      	ldr	r1, [pc, #68]	; (8003f88 <UARTEx_SetNbDataToProcess+0x94>)
 8003f44:	5c8a      	ldrb	r2, [r1, r2]
 8003f46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003f4a:	7b3a      	ldrb	r2, [r7, #12]
 8003f4c:	490f      	ldr	r1, [pc, #60]	; (8003f8c <UARTEx_SetNbDataToProcess+0x98>)
 8003f4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f50:	fb93 f3f2 	sdiv	r3, r3, r2
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
 8003f5e:	7b7a      	ldrb	r2, [r7, #13]
 8003f60:	4909      	ldr	r1, [pc, #36]	; (8003f88 <UARTEx_SetNbDataToProcess+0x94>)
 8003f62:	5c8a      	ldrb	r2, [r1, r2]
 8003f64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003f68:	7b7a      	ldrb	r2, [r7, #13]
 8003f6a:	4908      	ldr	r1, [pc, #32]	; (8003f8c <UARTEx_SetNbDataToProcess+0x98>)
 8003f6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003f7a:	bf00      	nop
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	08004030 	.word	0x08004030
 8003f8c:	08004038 	.word	0x08004038

08003f90 <__libc_init_array>:
 8003f90:	b570      	push	{r4, r5, r6, lr}
 8003f92:	4d0d      	ldr	r5, [pc, #52]	; (8003fc8 <__libc_init_array+0x38>)
 8003f94:	4c0d      	ldr	r4, [pc, #52]	; (8003fcc <__libc_init_array+0x3c>)
 8003f96:	1b64      	subs	r4, r4, r5
 8003f98:	10a4      	asrs	r4, r4, #2
 8003f9a:	2600      	movs	r6, #0
 8003f9c:	42a6      	cmp	r6, r4
 8003f9e:	d109      	bne.n	8003fb4 <__libc_init_array+0x24>
 8003fa0:	4d0b      	ldr	r5, [pc, #44]	; (8003fd0 <__libc_init_array+0x40>)
 8003fa2:	4c0c      	ldr	r4, [pc, #48]	; (8003fd4 <__libc_init_array+0x44>)
 8003fa4:	f000 f820 	bl	8003fe8 <_init>
 8003fa8:	1b64      	subs	r4, r4, r5
 8003faa:	10a4      	asrs	r4, r4, #2
 8003fac:	2600      	movs	r6, #0
 8003fae:	42a6      	cmp	r6, r4
 8003fb0:	d105      	bne.n	8003fbe <__libc_init_array+0x2e>
 8003fb2:	bd70      	pop	{r4, r5, r6, pc}
 8003fb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fb8:	4798      	blx	r3
 8003fba:	3601      	adds	r6, #1
 8003fbc:	e7ee      	b.n	8003f9c <__libc_init_array+0xc>
 8003fbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fc2:	4798      	blx	r3
 8003fc4:	3601      	adds	r6, #1
 8003fc6:	e7f2      	b.n	8003fae <__libc_init_array+0x1e>
 8003fc8:	08004048 	.word	0x08004048
 8003fcc:	08004048 	.word	0x08004048
 8003fd0:	08004048 	.word	0x08004048
 8003fd4:	0800404c 	.word	0x0800404c

08003fd8 <memset>:
 8003fd8:	4402      	add	r2, r0
 8003fda:	4603      	mov	r3, r0
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d100      	bne.n	8003fe2 <memset+0xa>
 8003fe0:	4770      	bx	lr
 8003fe2:	f803 1b01 	strb.w	r1, [r3], #1
 8003fe6:	e7f9      	b.n	8003fdc <memset+0x4>

08003fe8 <_init>:
 8003fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fea:	bf00      	nop
 8003fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fee:	bc08      	pop	{r3}
 8003ff0:	469e      	mov	lr, r3
 8003ff2:	4770      	bx	lr

08003ff4 <_fini>:
 8003ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ff6:	bf00      	nop
 8003ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ffa:	bc08      	pop	{r3}
 8003ffc:	469e      	mov	lr, r3
 8003ffe:	4770      	bx	lr
